// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module equalizer_lvpe_correction (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sym_phase_address0,
        sym_phase_ce0,
        sym_phase_we0,
        sym_phase_d0,
        cpe,
        prev_PEG
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] sym_phase_address0;
output   sym_phase_ce0;
output   sym_phase_we0;
output  [17:0] sym_phase_d0;
input  [15:0] cpe;
input  [31:0] prev_PEG;

reg ap_idle;
reg sym_phase_ce0;
reg sym_phase_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln8_fu_105_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire  signed [17:0] sext_ln70_fu_89_p1;
reg  signed [17:0] sext_ln70_reg_226;
wire    ap_block_pp0_stage0_11001;
wire  signed [17:0] trunc_ln70_fu_93_p1;
reg  signed [17:0] trunc_ln70_reg_231;
wire   [5:0] lhs_fu_121_p6;
reg   [5:0] lhs_reg_240;
reg   [5:0] lhs_reg_240_pp0_iter1_reg;
reg   [5:0] lhs_reg_240_pp0_iter2_reg;
reg   [5:0] lhs_reg_240_pp0_iter3_reg;
reg   [5:0] lhs_reg_240_pp0_iter4_reg;
wire  signed [17:0] grp_fu_213_p3;
reg  signed [17:0] phase_err_V_reg_251;
wire   [63:0] zext_ln573_fu_178_p1;
wire    ap_block_pp0_stage0;
reg   [2:0] i_V_fu_60;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i_V_1;
wire   [2:0] i_V_2_fu_111_p2;
wire   [1:0] lhs_fu_121_p5;
wire   [6:0] zext_ln1525_fu_140_p1;
wire   [6:0] ret_fu_143_p2;
wire   [0:0] icmp_ln1069_fu_149_p2;
wire   [6:0] select_ln10_fu_155_p3;
wire  signed [6:0] used_idx_V_fu_163_p2;
wire   [0:0] icmp_ln1057_fu_187_p2;
(* use_dsp48 = "no" *) wire   [17:0] add_ln70_1_fu_192_p2;
wire   [0:0] icmp_ln1065_fu_173_p2;
(* use_dsp48 = "no" *) wire   [17:0] add_ln70_fu_182_p2;
wire   [17:0] phase_err_V_1_fu_197_p3;
wire  signed [15:0] grp_fu_213_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_done_reg = 1'b0;
end

equalizer_mux_42_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 6 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 6 ))
mux_42_6_1_1_U60(
    .din0(6'd7),
    .din1(6'd21),
    .din2(6'd43),
    .din3(6'd57),
    .din4(lhs_fu_121_p5),
    .dout(lhs_fu_121_p6)
);

equalizer_mac_muladd_18s_7s_16s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 18 ))
mac_muladd_18s_7s_16s_18_4_1_U61(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln70_reg_231),
    .din1(used_idx_V_fu_163_p2),
    .din2(grp_fu_213_p2),
    .ce(1'b1),
    .dout(grp_fu_213_p3)
);

equalizer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln8_fu_105_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_V_fu_60 <= i_V_2_fu_111_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_V_fu_60 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        lhs_reg_240_pp0_iter1_reg <= lhs_reg_240;
        sext_ln70_reg_226 <= sext_ln70_fu_89_p1;
        trunc_ln70_reg_231 <= trunc_ln70_fu_93_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        lhs_reg_240_pp0_iter2_reg <= lhs_reg_240_pp0_iter1_reg;
        lhs_reg_240_pp0_iter3_reg <= lhs_reg_240_pp0_iter2_reg;
        lhs_reg_240_pp0_iter4_reg <= lhs_reg_240_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_105_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lhs_reg_240 <= lhs_fu_121_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        phase_err_V_reg_251 <= grp_fu_213_p3;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_105_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_V_1 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_V_1 = i_V_fu_60;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        sym_phase_ce0 = 1'b1;
    end else begin
        sym_phase_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        sym_phase_we0 = 1'b1;
    end else begin
        sym_phase_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln70_1_fu_192_p2 = ($signed(phase_err_V_reg_251) + $signed(18'd3217));

assign add_ln70_fu_182_p2 = ($signed(phase_err_V_reg_251) + $signed(18'd258927));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_213_p2 = sext_ln70_reg_226;

assign i_V_2_fu_111_p2 = (ap_sig_allocacmp_i_V_1 + 3'd1);

assign icmp_ln1057_fu_187_p2 = (($signed(phase_err_V_reg_251) < $signed(18'd260536)) ? 1'b1 : 1'b0);

assign icmp_ln1065_fu_173_p2 = (($signed(phase_err_V_reg_251) > $signed(18'd1608)) ? 1'b1 : 1'b0);

assign icmp_ln1069_fu_149_p2 = ((ret_fu_143_p2 < 7'd34) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_105_p2 = ((ap_sig_allocacmp_i_V_1 == 3'd4) ? 1'b1 : 1'b0);

assign lhs_fu_121_p5 = ap_sig_allocacmp_i_V_1[1:0];

assign phase_err_V_1_fu_197_p3 = ((icmp_ln1057_fu_187_p2[0:0] == 1'b1) ? add_ln70_1_fu_192_p2 : phase_err_V_reg_251);

assign ret_fu_143_p2 = (zext_ln1525_fu_140_p1 + 7'd1);

assign select_ln10_fu_155_p3 = ((icmp_ln1069_fu_149_p2[0:0] == 1'b1) ? 7'd1 : 7'd65);

assign sext_ln70_fu_89_p1 = $signed(cpe);

assign sym_phase_address0 = zext_ln573_fu_178_p1;

assign sym_phase_d0 = ((icmp_ln1065_fu_173_p2[0:0] == 1'b1) ? add_ln70_fu_182_p2 : phase_err_V_1_fu_197_p3);

assign trunc_ln70_fu_93_p1 = prev_PEG[17:0];

assign used_idx_V_fu_163_p2 = (select_ln10_fu_155_p3 + zext_ln1525_fu_140_p1);

assign zext_ln1525_fu_140_p1 = lhs_reg_240;

assign zext_ln573_fu_178_p1 = lhs_reg_240_pp0_iter4_reg;

endmodule //equalizer_lvpe_correction
