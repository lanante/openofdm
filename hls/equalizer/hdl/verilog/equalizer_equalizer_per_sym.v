// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module equalizer_equalizer_per_sym (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sample_out_V_din,
        sample_out_V_full_n,
        sample_out_V_write,
        symbol_iq_M_real_0_0_0_address0,
        symbol_iq_M_real_0_0_0_ce0,
        symbol_iq_M_real_0_0_0_q0,
        symbol_iq_M_imag_0_0_0_address0,
        symbol_iq_M_imag_0_0_0_ce0,
        symbol_iq_M_imag_0_0_0_q0,
        sym_phase_address0,
        sym_phase_ce0,
        sym_phase_q0,
        new_lts_Addr_A,
        new_lts_EN_A,
        new_lts_WEN_A,
        new_lts_Din_A,
        new_lts_Dout_A,
        arr,
        length_r,
        DATA_SC_IDX_48_address0,
        DATA_SC_IDX_48_ce0,
        DATA_SC_IDX_48_q0,
        rotate_I_V_address0,
        rotate_I_V_ce0,
        rotate_I_V_q0,
        rotate_Q_V_address0,
        rotate_Q_V_ce0,
        rotate_Q_V_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] sample_out_V_din;
input   sample_out_V_full_n;
output   sample_out_V_write;
output  [5:0] symbol_iq_M_real_0_0_0_address0;
output   symbol_iq_M_real_0_0_0_ce0;
input  [15:0] symbol_iq_M_real_0_0_0_q0;
output  [5:0] symbol_iq_M_imag_0_0_0_address0;
output   symbol_iq_M_imag_0_0_0_ce0;
input  [15:0] symbol_iq_M_imag_0_0_0_q0;
output  [5:0] sym_phase_address0;
output   sym_phase_ce0;
input  [17:0] sym_phase_q0;
output  [31:0] new_lts_Addr_A;
output   new_lts_EN_A;
output  [3:0] new_lts_WEN_A;
output  [31:0] new_lts_Din_A;
input  [31:0] new_lts_Dout_A;
input  [9:0] arr;
input  [4:0] length_r;
output  [9:0] DATA_SC_IDX_48_address0;
output   DATA_SC_IDX_48_ce0;
input  [5:0] DATA_SC_IDX_48_q0;
output  [8:0] rotate_I_V_address0;
output   rotate_I_V_ce0;
input  [11:0] rotate_I_V_q0;
output  [8:0] rotate_Q_V_address0;
output   rotate_Q_V_ce0;
input  [10:0] rotate_Q_V_q0;

reg ap_idle;
reg sample_out_V_write;
reg symbol_iq_M_real_0_0_0_ce0;
reg symbol_iq_M_imag_0_0_0_ce0;
reg sym_phase_ce0;
reg new_lts_EN_A;
reg DATA_SC_IDX_48_ce0;
reg rotate_I_V_ce0;
reg rotate_Q_V_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_enable_reg_pp0_iter37;
reg    ap_enable_reg_pp0_iter38;
reg    ap_enable_reg_pp0_iter39;
reg    ap_enable_reg_pp0_iter40;
reg    ap_enable_reg_pp0_iter41;
reg    ap_enable_reg_pp0_iter42;
reg    ap_enable_reg_pp0_iter43;
reg    ap_enable_reg_pp0_iter44;
reg    ap_enable_reg_pp0_iter45;
reg    ap_enable_reg_pp0_iter46;
reg    ap_enable_reg_pp0_iter47;
reg    ap_enable_reg_pp0_iter48;
reg    ap_enable_reg_pp0_iter49;
reg    ap_enable_reg_pp0_iter50;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_state20_pp0_stage0_iter19;
wire    ap_block_state21_pp0_stage0_iter20;
wire    ap_block_state22_pp0_stage0_iter21;
wire    ap_block_state23_pp0_stage0_iter22;
wire    ap_block_state24_pp0_stage0_iter23;
wire    ap_block_state25_pp0_stage0_iter24;
wire    ap_block_state26_pp0_stage0_iter25;
wire    ap_block_state27_pp0_stage0_iter26;
wire    ap_block_state28_pp0_stage0_iter27;
wire    ap_block_state29_pp0_stage0_iter28;
wire    ap_block_state30_pp0_stage0_iter29;
wire    ap_block_state31_pp0_stage0_iter30;
wire    ap_block_state32_pp0_stage0_iter31;
wire    ap_block_state33_pp0_stage0_iter32;
wire    ap_block_state34_pp0_stage0_iter33;
wire    ap_block_state35_pp0_stage0_iter34;
wire    ap_block_state36_pp0_stage0_iter35;
wire    ap_block_state37_pp0_stage0_iter36;
wire    ap_block_state38_pp0_stage0_iter37;
wire    ap_block_state39_pp0_stage0_iter38;
wire    ap_block_state40_pp0_stage0_iter39;
wire    ap_block_state41_pp0_stage0_iter40;
wire    ap_block_state42_pp0_stage0_iter41;
wire    ap_block_state43_pp0_stage0_iter42;
wire    ap_block_state44_pp0_stage0_iter43;
wire    ap_block_state45_pp0_stage0_iter44;
wire    ap_block_state46_pp0_stage0_iter45;
wire    ap_block_state47_pp0_stage0_iter46;
wire    ap_block_state48_pp0_stage0_iter47;
wire    ap_block_state49_pp0_stage0_iter48;
wire    ap_block_state50_pp0_stage0_iter49;
reg    ap_block_state51_pp0_stage0_iter50;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln8_fu_276_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    sample_out_V_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln573_fu_308_p1;
reg   [63:0] zext_ln573_reg_944;
reg   [63:0] zext_ln573_reg_944_pp0_iter2_reg;
reg   [63:0] zext_ln573_reg_944_pp0_iter3_reg;
reg   [63:0] zext_ln573_reg_944_pp0_iter4_reg;
reg   [63:0] zext_ln573_reg_944_pp0_iter5_reg;
reg   [63:0] zext_ln573_reg_944_pp0_iter6_reg;
reg   [63:0] zext_ln573_reg_944_pp0_iter7_reg;
wire   [15:0] trunc_ln70_fu_313_p1;
reg   [15:0] trunc_ln70_reg_956;
reg   [0:0] tmp_14_reg_962;
reg   [0:0] tmp_14_reg_962_pp0_iter3_reg;
wire   [0:0] icmp_ln1069_fu_336_p2;
reg   [0:0] icmp_ln1069_reg_971;
wire   [8:0] actual_phase_V_fu_342_p1;
reg   [8:0] actual_phase_V_reg_978;
wire   [0:0] icmp_ln1069_3_fu_346_p2;
reg   [0:0] icmp_ln1069_3_reg_986;
wire   [0:0] and_ln1069_2_fu_364_p2;
reg   [0:0] and_ln1069_2_reg_991;
wire   [2:0] quadrant_V_12_fu_464_p3;
reg   [2:0] quadrant_V_12_reg_998;
reg   [2:0] quadrant_V_12_reg_998_pp0_iter5_reg;
reg   [11:0] rhs_reg_1024;
reg   [10:0] rhs_9_reg_1033;
wire  signed [27:0] sext_ln1524_fu_704_p1;
wire  signed [27:0] sext_ln1524_6_fu_708_p1;
reg  signed [27:0] sext_ln1524_6_reg_1051;
wire  signed [27:0] sext_ln1524_8_fu_712_p1;
reg  signed [27:0] sext_ln1524_8_reg_1057;
wire  signed [27:0] sext_ln1524_7_fu_716_p1;
wire  signed [27:0] grp_fu_857_p2;
wire  signed [27:0] grp_fu_863_p2;
reg   [15:0] out_iq_M_imag_V_reg_1084;
wire  signed [15:0] lhs_11_fu_742_p4;
reg  signed [15:0] lhs_11_reg_1089;
wire  signed [15:0] rhs_12_fu_752_p2;
reg  signed [15:0] rhs_12_reg_1094;
wire  signed [31:0] sext_ln225_fu_758_p1;
wire  signed [21:0] sext_ln1524_9_fu_762_p1;
reg  signed [21:0] sext_ln1524_9_reg_1105;
wire  signed [21:0] sext_ln1524_10_fu_766_p1;
wire  signed [21:0] sext_ln1524_11_fu_770_p1;
reg  signed [21:0] sext_ln1524_11_reg_1117;
wire  signed [21:0] sext_ln1524_12_fu_777_p1;
wire  signed [21:0] grp_fu_885_p2;
wire  signed [21:0] grp_fu_891_p2;
wire  signed [31:0] grp_fu_897_p2;
wire  signed [31:0] sext_ln1676_fu_826_p1;
wire   [15:0] grp_fu_830_p2;
reg   [15:0] norm_i_V_reg_1170;
wire   [15:0] grp_fu_836_p2;
reg   [15:0] norm_q_V_reg_1175;
wire   [63:0] zext_ln573_3_fu_298_p1;
wire   [63:0] zext_ln573_4_fu_471_p1;
reg   [5:0] op2_fu_150;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_i_V_4;
wire   [5:0] i_V_fu_282_p2;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] new_lts_Addr_A_orig;
wire  signed [5:0] length_cast_fu_264_p1;
wire   [9:0] zext_ln1571_fu_288_p1;
wire   [9:0] add_ln573_fu_292_p2;
wire   [15:0] phase_abs_V_fu_325_p2;
wire   [15:0] phase_abs_V_2_fu_330_p3;
wire   [0:0] icmp_ln1069_4_fu_352_p2;
wire   [0:0] xor_ln1069_2_fu_358_p2;
wire   [0:0] xor_ln1069_fu_413_p2;
wire   [8:0] actual_phase_V_6_fu_396_p2;
wire   [8:0] actual_phase_V_5_fu_384_p2;
wire   [0:0] and_ln1069_fu_418_p2;
wire   [8:0] actual_phase_V_7_fu_408_p2;
wire   [0:0] or_ln1069_fu_430_p2;
wire   [8:0] select_ln1069_fu_423_p3;
wire   [8:0] select_ln1069_6_fu_435_p3;
wire   [2:0] quadrant_V_fu_370_p3;
wire   [2:0] quadrant_V_9_fu_401_p3;
wire   [2:0] quadrant_V_7_fu_377_p3;
wire   [2:0] quadrant_V_10_fu_449_p3;
wire   [2:0] quadrant_V_8_fu_389_p3;
wire   [2:0] quadrant_V_11_fu_456_p3;
wire   [8:0] actual_phase_V_8_fu_441_p3;
wire   [12:0] zext_ln225_fu_477_p1;
wire  signed [12:0] ret_fu_480_p2;
wire   [11:0] zext_ln225_3_fu_490_p1;
wire  signed [11:0] ret_18_fu_493_p2;
wire  signed [15:0] sext_ln70_fu_486_p1;
wire   [27:0] tmp_s_fu_499_p3;
wire   [26:0] tmp_1_fu_511_p4;
wire   [27:0] tmp_4_i_fu_523_p4;
wire  signed [15:0] sext_ln70_5_fu_536_p1;
wire   [27:0] tmp_5_i_fu_540_p3;
wire   [26:0] tmp_2_fu_551_p3;
wire   [27:0] tmp_3_fu_562_p4;
wire   [0:0] icmp_ln22_8_fu_603_p2;
wire  signed [28:0] tmp_7_i_fu_571_p1;
wire   [28:0] tmp_8_i_fu_575_p4;
wire   [0:0] icmp_ln22_7_fu_598_p2;
wire   [0:0] icmp_ln22_fu_593_p2;
wire   [28:0] tmp_9_i_fu_585_p3;
wire  signed [28:0] tmp_2_i_fu_507_p1;
wire   [0:0] or_ln22_fu_616_p2;
wire   [28:0] select_ln22_fu_608_p3;
wire   [28:0] select_ln22_7_fu_622_p3;
wire   [0:0] icmp_ln22_9_fu_638_p2;
wire   [28:0] zext_ln1526_4_fu_558_p1;
wire   [28:0] select_ln22_8_fu_630_p3;
wire   [0:0] icmp_ln22_10_fu_651_p2;
wire   [28:0] zext_ln1526_3_fu_547_p1;
wire   [28:0] select_ln22_9_fu_643_p3;
wire   [0:0] icmp_ln22_11_fu_664_p2;
wire   [28:0] zext_ln1526_fu_532_p1;
wire   [28:0] select_ln22_10_fu_656_p3;
wire   [0:0] icmp_ln22_12_fu_677_p2;
wire   [28:0] tmp_3_i_cast_fu_519_p1;
wire   [28:0] select_ln22_11_fu_669_p3;
wire   [28:0] rot_iq_fu_682_p3;
wire  signed [15:0] rhs_10_fu_690_p1;
wire  signed [12:0] trunc_ln51_2_fu_694_p4;
wire  signed [27:0] grp_fu_869_p3;
wire  signed [27:0] grp_fu_877_p3;
wire  signed [15:0] rhs_14_fu_738_p1;
wire   [15:0] out_iq_M_real_V_fu_720_p4;
wire  signed [21:0] grp_fu_903_p3;
wire   [20:0] tmp_4_fu_783_p4;
wire  signed [21:0] grp_fu_911_p3;
wire   [20:0] tmp_5_fu_800_p4;
wire  signed [31:0] grp_fu_919_p3;
wire   [30:0] out_i_V_fu_817_p4;
wire   [31:0] grp_fu_830_p0;
wire  signed [30:0] grp_fu_830_p1;
wire   [31:0] grp_fu_836_p0;
wire  signed [30:0] grp_fu_836_p1;
wire   [15:0] trunc_ln70_2_fu_845_p1;
wire   [15:0] trunc_ln70_1_fu_842_p1;
wire  signed [15:0] grp_fu_857_p0;
wire  signed [15:0] grp_fu_863_p1;
wire  signed [15:0] grp_fu_869_p0;
wire  signed [12:0] grp_fu_869_p1;
wire  signed [15:0] grp_fu_877_p0;
wire  signed [15:0] grp_fu_877_p1;
wire  signed [15:0] grp_fu_885_p1;
wire  signed [15:0] grp_fu_891_p1;
wire  signed [15:0] grp_fu_897_p0;
wire  signed [15:0] grp_fu_897_p1;
wire  signed [15:0] grp_fu_903_p0;
wire  signed [15:0] grp_fu_903_p1;
wire  signed [15:0] grp_fu_911_p0;
wire  signed [15:0] grp_fu_911_p1;
reg    grp_fu_830_ce;
reg    grp_fu_836_ce;
reg    grp_fu_857_ce;
reg    grp_fu_863_ce;
reg    grp_fu_869_ce;
reg    grp_fu_877_ce;
reg    grp_fu_885_ce;
reg    grp_fu_891_ce;
reg    grp_fu_897_ce;
reg    grp_fu_903_ce;
reg    grp_fu_911_ce;
reg    grp_fu_919_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg    ap_loop_exit_ready_pp0_iter19_reg;
reg    ap_loop_exit_ready_pp0_iter20_reg;
reg    ap_loop_exit_ready_pp0_iter21_reg;
reg    ap_loop_exit_ready_pp0_iter22_reg;
reg    ap_loop_exit_ready_pp0_iter23_reg;
reg    ap_loop_exit_ready_pp0_iter24_reg;
reg    ap_loop_exit_ready_pp0_iter25_reg;
reg    ap_loop_exit_ready_pp0_iter26_reg;
reg    ap_loop_exit_ready_pp0_iter27_reg;
reg    ap_loop_exit_ready_pp0_iter28_reg;
reg    ap_loop_exit_ready_pp0_iter29_reg;
reg    ap_loop_exit_ready_pp0_iter30_reg;
reg    ap_loop_exit_ready_pp0_iter31_reg;
reg    ap_loop_exit_ready_pp0_iter32_reg;
reg    ap_loop_exit_ready_pp0_iter33_reg;
reg    ap_loop_exit_ready_pp0_iter34_reg;
reg    ap_loop_exit_ready_pp0_iter35_reg;
reg    ap_loop_exit_ready_pp0_iter36_reg;
reg    ap_loop_exit_ready_pp0_iter37_reg;
reg    ap_loop_exit_ready_pp0_iter38_reg;
reg    ap_loop_exit_ready_pp0_iter39_reg;
reg    ap_loop_exit_ready_pp0_iter40_reg;
reg    ap_loop_exit_ready_pp0_iter41_reg;
reg    ap_loop_exit_ready_pp0_iter42_reg;
reg    ap_loop_exit_ready_pp0_iter43_reg;
reg    ap_loop_exit_ready_pp0_iter44_reg;
reg    ap_loop_exit_ready_pp0_iter45_reg;
reg    ap_loop_exit_ready_pp0_iter46_reg;
reg    ap_loop_exit_ready_pp0_iter47_reg;
reg    ap_loop_exit_ready_pp0_iter48_reg;
reg    ap_loop_exit_ready_pp0_iter49_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 ap_enable_reg_pp0_iter39 = 1'b0;
#0 ap_enable_reg_pp0_iter40 = 1'b0;
#0 ap_enable_reg_pp0_iter41 = 1'b0;
#0 ap_enable_reg_pp0_iter42 = 1'b0;
#0 ap_enable_reg_pp0_iter43 = 1'b0;
#0 ap_enable_reg_pp0_iter44 = 1'b0;
#0 ap_enable_reg_pp0_iter45 = 1'b0;
#0 ap_enable_reg_pp0_iter46 = 1'b0;
#0 ap_enable_reg_pp0_iter47 = 1'b0;
#0 ap_enable_reg_pp0_iter48 = 1'b0;
#0 ap_enable_reg_pp0_iter49 = 1'b0;
#0 ap_enable_reg_pp0_iter50 = 1'b0;
#0 ap_done_reg = 1'b0;
end

equalizer_sdiv_32ns_31s_16_36_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 16 ))
sdiv_32ns_31s_16_36_1_U100(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_830_p0),
    .din1(grp_fu_830_p1),
    .ce(grp_fu_830_ce),
    .dout(grp_fu_830_p2)
);

equalizer_sdiv_32ns_31s_16_36_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 16 ))
sdiv_32ns_31s_16_36_1_U101(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_836_p0),
    .din1(grp_fu_836_p1),
    .ce(grp_fu_836_ce),
    .dout(grp_fu_836_p2)
);

equalizer_mul_mul_16s_16s_28_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 28 ))
mul_mul_16s_16s_28_4_1_U102(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_857_p0),
    .din1(rhs_10_fu_690_p1),
    .ce(grp_fu_857_ce),
    .dout(grp_fu_857_p2)
);

equalizer_mul_mul_13s_16s_28_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 28 ))
mul_mul_13s_16s_28_4_1_U103(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln51_2_fu_694_p4),
    .din1(grp_fu_863_p1),
    .ce(grp_fu_863_ce),
    .dout(grp_fu_863_p2)
);

equalizer_mac_mulsub_16s_13s_28s_28_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 13 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
mac_mulsub_16s_13s_28s_28_4_1_U104(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_869_p0),
    .din1(grp_fu_869_p1),
    .din2(grp_fu_857_p2),
    .ce(grp_fu_869_ce),
    .dout(grp_fu_869_p3)
);

equalizer_mac_muladd_16s_16s_28s_28_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
mac_muladd_16s_16s_28s_28_4_1_U105(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_877_p0),
    .din1(grp_fu_877_p1),
    .din2(grp_fu_863_p2),
    .ce(grp_fu_877_ce),
    .dout(grp_fu_877_p3)
);

equalizer_mul_mul_16s_16s_22_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 22 ))
mul_mul_16s_16s_22_4_1_U106(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(rhs_14_fu_738_p1),
    .din1(grp_fu_885_p1),
    .ce(grp_fu_885_ce),
    .dout(grp_fu_885_p2)
);

equalizer_mul_mul_16s_16s_22_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 22 ))
mul_mul_16s_16s_22_4_1_U107(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(rhs_12_fu_752_p2),
    .din1(grp_fu_891_p1),
    .ce(grp_fu_891_ce),
    .dout(grp_fu_891_p2)
);

equalizer_mul_mul_16s_16s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16s_16s_32_4_1_U108(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_897_p0),
    .din1(grp_fu_897_p1),
    .ce(grp_fu_897_ce),
    .dout(grp_fu_897_p2)
);

equalizer_mac_mulsub_16s_16s_22s_22_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 22 ),
    .dout_WIDTH( 22 ))
mac_mulsub_16s_16s_22s_22_4_1_U109(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_903_p0),
    .din1(grp_fu_903_p1),
    .din2(grp_fu_885_p2),
    .ce(grp_fu_903_ce),
    .dout(grp_fu_903_p3)
);

equalizer_mac_muladd_16s_16s_22s_22_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 22 ),
    .dout_WIDTH( 22 ))
mac_muladd_16s_16s_22s_22_4_1_U110(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_911_p0),
    .din1(grp_fu_911_p1),
    .din2(grp_fu_891_p2),
    .ce(grp_fu_911_ce),
    .dout(grp_fu_911_p3)
);

equalizer_mac_mulsub_16s_16s_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_mulsub_16s_16s_32s_32_4_1_U111(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lhs_11_reg_1089),
    .din1(rhs_12_reg_1094),
    .din2(grp_fu_897_p2),
    .ce(grp_fu_919_ce),
    .dout(grp_fu_919_p3)
);

equalizer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter49_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter41 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter42 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter43 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter44 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter45 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter46 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter47 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter48 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter49 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter50 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln8_fu_276_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            op2_fu_150 <= i_V_fu_282_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            op2_fu_150 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        actual_phase_V_reg_978 <= actual_phase_V_fu_342_p1;
        and_ln1069_2_reg_991 <= and_ln1069_2_fu_364_p2;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
        ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
        ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
        ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
        ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
        ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
        ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
        ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
        ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
        ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
        ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
        ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
        ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
        ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
        ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
        ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
        ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
        ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
        ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
        ap_loop_exit_ready_pp0_iter38_reg <= ap_loop_exit_ready_pp0_iter37_reg;
        ap_loop_exit_ready_pp0_iter39_reg <= ap_loop_exit_ready_pp0_iter38_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter40_reg <= ap_loop_exit_ready_pp0_iter39_reg;
        ap_loop_exit_ready_pp0_iter41_reg <= ap_loop_exit_ready_pp0_iter40_reg;
        ap_loop_exit_ready_pp0_iter42_reg <= ap_loop_exit_ready_pp0_iter41_reg;
        ap_loop_exit_ready_pp0_iter43_reg <= ap_loop_exit_ready_pp0_iter42_reg;
        ap_loop_exit_ready_pp0_iter44_reg <= ap_loop_exit_ready_pp0_iter43_reg;
        ap_loop_exit_ready_pp0_iter45_reg <= ap_loop_exit_ready_pp0_iter44_reg;
        ap_loop_exit_ready_pp0_iter46_reg <= ap_loop_exit_ready_pp0_iter45_reg;
        ap_loop_exit_ready_pp0_iter47_reg <= ap_loop_exit_ready_pp0_iter46_reg;
        ap_loop_exit_ready_pp0_iter48_reg <= ap_loop_exit_ready_pp0_iter47_reg;
        ap_loop_exit_ready_pp0_iter49_reg <= ap_loop_exit_ready_pp0_iter48_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln1069_3_reg_986 <= icmp_ln1069_3_fu_346_p2;
        icmp_ln1069_reg_971 <= icmp_ln1069_fu_336_p2;
        lhs_11_reg_1089 <= {{new_lts_Dout_A[31:16]}};
        norm_i_V_reg_1170 <= grp_fu_830_p2;
        norm_q_V_reg_1175 <= grp_fu_836_p2;
        out_iq_M_imag_V_reg_1084 <= {{grp_fu_877_p3[27:12]}};
        quadrant_V_12_reg_998 <= quadrant_V_12_fu_464_p3;
        quadrant_V_12_reg_998_pp0_iter5_reg <= quadrant_V_12_reg_998;
        rhs_12_reg_1094 <= rhs_12_fu_752_p2;
        rhs_9_reg_1033 <= rotate_Q_V_q0;
        rhs_reg_1024 <= rotate_I_V_q0;
        sext_ln1524_11_reg_1117 <= sext_ln1524_11_fu_770_p1;
        sext_ln1524_6_reg_1051 <= sext_ln1524_6_fu_708_p1;
        sext_ln1524_8_reg_1057 <= sext_ln1524_8_fu_712_p1;
        sext_ln1524_9_reg_1105 <= sext_ln1524_9_fu_762_p1;
        tmp_14_reg_962 <= sym_phase_q0[32'd15];
        tmp_14_reg_962_pp0_iter3_reg <= tmp_14_reg_962;
        trunc_ln70_reg_956 <= trunc_ln70_fu_313_p1;
        zext_ln573_reg_944_pp0_iter2_reg[5 : 0] <= zext_ln573_reg_944[5 : 0];
        zext_ln573_reg_944_pp0_iter3_reg[5 : 0] <= zext_ln573_reg_944_pp0_iter2_reg[5 : 0];
        zext_ln573_reg_944_pp0_iter4_reg[5 : 0] <= zext_ln573_reg_944_pp0_iter3_reg[5 : 0];
        zext_ln573_reg_944_pp0_iter5_reg[5 : 0] <= zext_ln573_reg_944_pp0_iter4_reg[5 : 0];
        zext_ln573_reg_944_pp0_iter6_reg[5 : 0] <= zext_ln573_reg_944_pp0_iter5_reg[5 : 0];
        zext_ln573_reg_944_pp0_iter7_reg[5 : 0] <= zext_ln573_reg_944_pp0_iter6_reg[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        zext_ln573_reg_944[5 : 0] <= zext_ln573_fu_308_p1[5 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DATA_SC_IDX_48_ce0 = 1'b1;
    end else begin
        DATA_SC_IDX_48_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_276_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter49_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter50 == 1'b0) & (ap_enable_reg_pp0_iter49 == 1'b0) & (ap_enable_reg_pp0_iter48 == 1'b0) & (ap_enable_reg_pp0_iter47 == 1'b0) & (ap_enable_reg_pp0_iter46 == 1'b0) & (ap_enable_reg_pp0_iter45 == 1'b0) & (ap_enable_reg_pp0_iter44 == 1'b0) & (ap_enable_reg_pp0_iter43 == 1'b0) & (ap_enable_reg_pp0_iter42 == 1'b0) & (ap_enable_reg_pp0_iter41 == 1'b0) & (ap_enable_reg_pp0_iter40 == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_V_4 = 6'd0;
    end else begin
        ap_sig_allocacmp_i_V_4 = op2_fu_150;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_830_ce = 1'b1;
    end else begin
        grp_fu_830_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_836_ce = 1'b1;
    end else begin
        grp_fu_836_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_857_ce = 1'b1;
    end else begin
        grp_fu_857_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_863_ce = 1'b1;
    end else begin
        grp_fu_863_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_869_ce = 1'b1;
    end else begin
        grp_fu_869_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_877_ce = 1'b1;
    end else begin
        grp_fu_877_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_885_ce = 1'b1;
    end else begin
        grp_fu_885_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_891_ce = 1'b1;
    end else begin
        grp_fu_891_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_897_ce = 1'b1;
    end else begin
        grp_fu_897_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_903_ce = 1'b1;
    end else begin
        grp_fu_903_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_911_ce = 1'b1;
    end else begin
        grp_fu_911_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_919_ce = 1'b1;
    end else begin
        grp_fu_919_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        new_lts_EN_A = 1'b1;
    end else begin
        new_lts_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        rotate_I_V_ce0 = 1'b1;
    end else begin
        rotate_I_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        rotate_Q_V_ce0 = 1'b1;
    end else begin
        rotate_Q_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter50 == 1'b1))) begin
        sample_out_V_blk_n = sample_out_V_full_n;
    end else begin
        sample_out_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter50 == 1'b1))) begin
        sample_out_V_write = 1'b1;
    end else begin
        sample_out_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sym_phase_ce0 = 1'b1;
    end else begin
        sym_phase_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        symbol_iq_M_imag_0_0_0_ce0 = 1'b1;
    end else begin
        symbol_iq_M_imag_0_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        symbol_iq_M_real_0_0_0_ce0 = 1'b1;
    end else begin
        symbol_iq_M_real_0_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign DATA_SC_IDX_48_address0 = zext_ln573_3_fu_298_p1;

assign actual_phase_V_5_fu_384_p2 = ($signed(9'd292) - $signed(actual_phase_V_reg_978));

assign actual_phase_V_6_fu_396_p2 = (actual_phase_V_reg_978 + 9'd220);

assign actual_phase_V_7_fu_408_p2 = (9'd72 - actual_phase_V_reg_978);

assign actual_phase_V_8_fu_441_p3 = ((or_ln1069_fu_430_p2[0:0] == 1'b1) ? select_ln1069_fu_423_p3 : select_ln1069_6_fu_435_p3);

assign actual_phase_V_fu_342_p1 = phase_abs_V_2_fu_330_p3[8:0];

assign add_ln573_fu_292_p2 = (zext_ln1571_fu_288_p1 + arr);

assign and_ln1069_2_fu_364_p2 = (xor_ln1069_2_fu_358_p2 & icmp_ln1069_4_fu_352_p2);

assign and_ln1069_fu_418_p2 = (xor_ln1069_fu_413_p2 & icmp_ln1069_3_reg_986);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((sample_out_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter50 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((sample_out_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter50 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((sample_out_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter50 == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage0_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage0_iter45 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter46 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage0_iter47 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage0_iter48 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter49 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state51_pp0_stage0_iter50 = (sample_out_V_full_n == 1'b0);
end

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_830_p0 = {{tmp_4_fu_783_p4}, {11'd0}};

assign grp_fu_830_p1 = sext_ln1676_fu_826_p1;

assign grp_fu_836_p0 = {{tmp_5_fu_800_p4}, {11'd0}};

assign grp_fu_836_p1 = sext_ln1676_fu_826_p1;

assign grp_fu_857_p0 = sext_ln1524_fu_704_p1;

assign grp_fu_863_p1 = sext_ln1524_fu_704_p1;

assign grp_fu_869_p0 = sext_ln1524_7_fu_716_p1;

assign grp_fu_869_p1 = sext_ln1524_8_reg_1057;

assign grp_fu_877_p0 = sext_ln1524_7_fu_716_p1;

assign grp_fu_877_p1 = sext_ln1524_6_reg_1051;

assign grp_fu_885_p1 = sext_ln1524_10_fu_766_p1;

assign grp_fu_891_p1 = sext_ln1524_10_fu_766_p1;

assign grp_fu_897_p0 = sext_ln225_fu_758_p1;

assign grp_fu_897_p1 = sext_ln225_fu_758_p1;

assign grp_fu_903_p0 = sext_ln1524_11_reg_1117;

assign grp_fu_903_p1 = sext_ln1524_12_fu_777_p1;

assign grp_fu_911_p0 = sext_ln1524_9_reg_1105;

assign grp_fu_911_p1 = sext_ln1524_12_fu_777_p1;

assign i_V_fu_282_p2 = (ap_sig_allocacmp_i_V_4 + 6'd1);

assign icmp_ln1069_3_fu_346_p2 = ((phase_abs_V_2_fu_330_p3 < 16'd805) ? 1'b1 : 1'b0);

assign icmp_ln1069_4_fu_352_p2 = ((phase_abs_V_2_fu_330_p3 < 16'd1207) ? 1'b1 : 1'b0);

assign icmp_ln1069_fu_336_p2 = ((phase_abs_V_2_fu_330_p3 < 16'd403) ? 1'b1 : 1'b0);

assign icmp_ln22_10_fu_651_p2 = ((quadrant_V_12_reg_998_pp0_iter5_reg == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln22_11_fu_664_p2 = ((quadrant_V_12_reg_998_pp0_iter5_reg == 3'd1) ? 1'b1 : 1'b0);

assign icmp_ln22_12_fu_677_p2 = ((quadrant_V_12_reg_998_pp0_iter5_reg == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln22_7_fu_598_p2 = ((quadrant_V_12_reg_998_pp0_iter5_reg == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln22_8_fu_603_p2 = ((quadrant_V_12_reg_998_pp0_iter5_reg == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln22_9_fu_638_p2 = ((quadrant_V_12_reg_998_pp0_iter5_reg == 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_593_p2 = ((quadrant_V_12_reg_998_pp0_iter5_reg == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_276_p2 = ((ap_sig_allocacmp_i_V_4 == length_cast_fu_264_p1) ? 1'b1 : 1'b0);

assign length_cast_fu_264_p1 = $signed(length_r);

assign lhs_11_fu_742_p4 = {{new_lts_Dout_A[31:16]}};

assign new_lts_Addr_A = new_lts_Addr_A_orig << 32'd2;

assign new_lts_Addr_A_orig = zext_ln573_reg_944_pp0_iter7_reg;

assign new_lts_Din_A = 32'd0;

assign new_lts_WEN_A = 4'd0;

assign or_ln1069_fu_430_p2 = (and_ln1069_fu_418_p2 | and_ln1069_2_reg_991);

assign or_ln22_fu_616_p2 = (icmp_ln22_8_fu_603_p2 | icmp_ln22_7_fu_598_p2);

assign out_i_V_fu_817_p4 = {{grp_fu_919_p3[31:1]}};

assign out_iq_M_real_V_fu_720_p4 = {{grp_fu_869_p3[27:12]}};

assign phase_abs_V_2_fu_330_p3 = ((tmp_14_reg_962[0:0] == 1'b1) ? phase_abs_V_fu_325_p2 : trunc_ln70_reg_956);

assign phase_abs_V_fu_325_p2 = (16'd0 - trunc_ln70_reg_956);

assign quadrant_V_10_fu_449_p3 = ((icmp_ln1069_reg_971[0:0] == 1'b1) ? quadrant_V_fu_370_p3 : quadrant_V_9_fu_401_p3);

assign quadrant_V_11_fu_456_p3 = ((and_ln1069_fu_418_p2[0:0] == 1'b1) ? quadrant_V_7_fu_377_p3 : quadrant_V_10_fu_449_p3);

assign quadrant_V_12_fu_464_p3 = ((and_ln1069_2_reg_991[0:0] == 1'b1) ? quadrant_V_8_fu_389_p3 : quadrant_V_11_fu_456_p3);

assign quadrant_V_7_fu_377_p3 = ((tmp_14_reg_962_pp0_iter3_reg[0:0] == 1'b1) ? 3'd5 : 3'd1);

assign quadrant_V_8_fu_389_p3 = ((tmp_14_reg_962_pp0_iter3_reg[0:0] == 1'b1) ? 3'd6 : 3'd2);

assign quadrant_V_9_fu_401_p3 = ((tmp_14_reg_962_pp0_iter3_reg[0:0] == 1'b1) ? 3'd7 : 3'd3);

assign quadrant_V_fu_370_p3 = ((tmp_14_reg_962_pp0_iter3_reg[0:0] == 1'b1) ? 3'd4 : 3'd0);

assign ret_18_fu_493_p2 = (12'd0 - zext_ln225_3_fu_490_p1);

assign ret_fu_480_p2 = (13'd0 - zext_ln225_fu_477_p1);

assign rhs_10_fu_690_p1 = rot_iq_fu_682_p3[15:0];

assign rhs_12_fu_752_p2 = ($signed(16'd0) - $signed(lhs_11_fu_742_p4));

assign rhs_14_fu_738_p1 = new_lts_Dout_A[15:0];

assign rot_iq_fu_682_p3 = ((icmp_ln22_12_fu_677_p2[0:0] == 1'b1) ? tmp_3_i_cast_fu_519_p1 : select_ln22_11_fu_669_p3);

assign rotate_I_V_address0 = zext_ln573_4_fu_471_p1;

assign rotate_Q_V_address0 = zext_ln573_4_fu_471_p1;

assign sample_out_V_din = {{trunc_ln70_2_fu_845_p1}, {trunc_ln70_1_fu_842_p1}};

assign select_ln1069_6_fu_435_p3 = ((icmp_ln1069_reg_971[0:0] == 1'b1) ? actual_phase_V_reg_978 : actual_phase_V_7_fu_408_p2);

assign select_ln1069_fu_423_p3 = ((and_ln1069_2_reg_991[0:0] == 1'b1) ? actual_phase_V_6_fu_396_p2 : actual_phase_V_5_fu_384_p2);

assign select_ln22_10_fu_656_p3 = ((icmp_ln22_10_fu_651_p2[0:0] == 1'b1) ? zext_ln1526_3_fu_547_p1 : select_ln22_9_fu_643_p3);

assign select_ln22_11_fu_669_p3 = ((icmp_ln22_11_fu_664_p2[0:0] == 1'b1) ? zext_ln1526_fu_532_p1 : select_ln22_10_fu_656_p3);

assign select_ln22_7_fu_622_p3 = ((icmp_ln22_fu_593_p2[0:0] == 1'b1) ? tmp_9_i_fu_585_p3 : tmp_2_i_fu_507_p1);

assign select_ln22_8_fu_630_p3 = ((or_ln22_fu_616_p2[0:0] == 1'b1) ? select_ln22_fu_608_p3 : select_ln22_7_fu_622_p3);

assign select_ln22_9_fu_643_p3 = ((icmp_ln22_9_fu_638_p2[0:0] == 1'b1) ? zext_ln1526_4_fu_558_p1 : select_ln22_8_fu_630_p3);

assign select_ln22_fu_608_p3 = ((icmp_ln22_8_fu_603_p2[0:0] == 1'b1) ? tmp_7_i_fu_571_p1 : tmp_8_i_fu_575_p4);

assign sext_ln1524_10_fu_766_p1 = $signed(out_iq_M_real_V_fu_720_p4);

assign sext_ln1524_11_fu_770_p1 = rhs_12_fu_752_p2;

assign sext_ln1524_12_fu_777_p1 = $signed(out_iq_M_imag_V_reg_1084);

assign sext_ln1524_6_fu_708_p1 = rhs_10_fu_690_p1;

assign sext_ln1524_7_fu_716_p1 = $signed(symbol_iq_M_imag_0_0_0_q0);

assign sext_ln1524_8_fu_712_p1 = trunc_ln51_2_fu_694_p4;

assign sext_ln1524_9_fu_762_p1 = rhs_14_fu_738_p1;

assign sext_ln1524_fu_704_p1 = $signed(symbol_iq_M_real_0_0_0_q0);

assign sext_ln1676_fu_826_p1 = $signed(out_i_V_fu_817_p4);

assign sext_ln225_fu_758_p1 = rhs_14_fu_738_p1;

assign sext_ln70_5_fu_536_p1 = ret_18_fu_493_p2;

assign sext_ln70_fu_486_p1 = ret_fu_480_p2;

assign sym_phase_address0 = zext_ln573_fu_308_p1;

assign symbol_iq_M_imag_0_0_0_address0 = zext_ln573_reg_944_pp0_iter5_reg;

assign symbol_iq_M_real_0_0_0_address0 = zext_ln573_reg_944_pp0_iter4_reg;

assign tmp_1_fu_511_p4 = {{{rhs_9_reg_1033}, {4'd0}}, {rhs_reg_1024}};

assign tmp_2_fu_551_p3 = {{rhs_9_reg_1033}, {sext_ln70_fu_486_p1}};

assign tmp_2_i_fu_507_p1 = $signed(tmp_s_fu_499_p3);

assign tmp_3_fu_562_p4 = {{{ret_18_fu_493_p2}, {4'd0}}, {rhs_reg_1024}};

assign tmp_3_i_cast_fu_519_p1 = tmp_1_fu_511_p4;

assign tmp_4_fu_783_p4 = {{grp_fu_903_p3[21:1]}};

assign tmp_4_i_fu_523_p4 = {{{rhs_reg_1024}, {4'd0}}, {zext_ln225_3_fu_490_p1}};

assign tmp_5_fu_800_p4 = {{grp_fu_911_p3[21:1]}};

assign tmp_5_i_fu_540_p3 = {{rhs_reg_1024}, {sext_ln70_5_fu_536_p1}};

assign tmp_7_i_fu_571_p1 = $signed(tmp_3_fu_562_p4);

assign tmp_8_i_fu_575_p4 = {{{ret_fu_480_p2}, {4'd0}}, {zext_ln225_3_fu_490_p1}};

assign tmp_9_i_fu_585_p3 = {{ret_fu_480_p2}, {sext_ln70_5_fu_536_p1}};

assign tmp_s_fu_499_p3 = {{ret_18_fu_493_p2}, {sext_ln70_fu_486_p1}};

assign trunc_ln51_2_fu_694_p4 = {{rot_iq_fu_682_p3[28:16]}};

assign trunc_ln70_1_fu_842_p1 = norm_i_V_reg_1170[15:0];

assign trunc_ln70_2_fu_845_p1 = norm_q_V_reg_1175[15:0];

assign trunc_ln70_fu_313_p1 = sym_phase_q0[15:0];

assign xor_ln1069_2_fu_358_p2 = (icmp_ln1069_3_fu_346_p2 ^ 1'd1);

assign xor_ln1069_fu_413_p2 = (icmp_ln1069_reg_971 ^ 1'd1);

assign zext_ln1526_3_fu_547_p1 = tmp_5_i_fu_540_p3;

assign zext_ln1526_4_fu_558_p1 = tmp_2_fu_551_p3;

assign zext_ln1526_fu_532_p1 = tmp_4_i_fu_523_p4;

assign zext_ln1571_fu_288_p1 = ap_sig_allocacmp_i_V_4;

assign zext_ln225_3_fu_490_p1 = rhs_9_reg_1033;

assign zext_ln225_fu_477_p1 = rhs_reg_1024;

assign zext_ln573_3_fu_298_p1 = add_ln573_fu_292_p2;

assign zext_ln573_4_fu_471_p1 = actual_phase_V_8_fu_441_p3;

assign zext_ln573_fu_308_p1 = DATA_SC_IDX_48_q0;

always @ (posedge ap_clk) begin
    zext_ln573_reg_944[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln573_reg_944_pp0_iter2_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln573_reg_944_pp0_iter3_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln573_reg_944_pp0_iter4_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln573_reg_944_pp0_iter5_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln573_reg_944_pp0_iter6_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln573_reg_944_pp0_iter7_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //equalizer_equalizer_per_sym
