// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module equalizer_equalizer_Pipeline_lvpe_corr (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        select_ln3,
        ht,
        sext_ln1543,
        trunc_ln3,
        sext_ln70,
        sym_phase_V_address0,
        sym_phase_V_ce0,
        sym_phase_V_we0,
        sym_phase_V_d0,
        DATA_SC_IDX_52_V_address0,
        DATA_SC_IDX_52_V_ce0,
        DATA_SC_IDX_52_V_q0,
        DATA_SC_IDX_48_V_address0,
        DATA_SC_IDX_48_V_ce0,
        DATA_SC_IDX_48_V_q0,
        grp_fu_955_p_din0,
        grp_fu_955_p_din1,
        grp_fu_955_p_dout0,
        grp_fu_955_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [4:0] select_ln3;
input  [0:0] ht;
input  [18:0] sext_ln1543;
input  [17:0] trunc_ln3;
input  [11:0] sext_ln70;
output  [5:0] sym_phase_V_address0;
output   sym_phase_V_ce0;
output   sym_phase_V_we0;
output  [17:0] sym_phase_V_d0;
output  [5:0] DATA_SC_IDX_52_V_address0;
output   DATA_SC_IDX_52_V_ce0;
input  [5:0] DATA_SC_IDX_52_V_q0;
output  [5:0] DATA_SC_IDX_48_V_address0;
output   DATA_SC_IDX_48_V_ce0;
input  [5:0] DATA_SC_IDX_48_V_q0;
output  [25:0] grp_fu_955_p_din0;
output  [27:0] grp_fu_955_p_din1;
input  [51:0] grp_fu_955_p_dout0;
output   grp_fu_955_p_ce;

reg ap_idle;
reg sym_phase_V_ce0;
reg sym_phase_V_we0;
reg DATA_SC_IDX_52_V_ce0;
reg DATA_SC_IDX_48_V_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln8_fu_175_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire  signed [17:0] sext_ln70_cast_fu_155_p1;
reg  signed [17:0] sext_ln70_cast_reg_378;
wire  signed [25:0] sext_ln1543_cast_fu_159_p1;
reg  signed [25:0] sext_ln1543_cast_reg_383;
wire   [5:0] lhs_fu_198_p3;
reg   [5:0] lhs_reg_402;
reg   [5:0] lhs_reg_402_pp0_iter2_reg;
reg   [5:0] lhs_reg_402_pp0_iter3_reg;
reg   [5:0] lhs_reg_402_pp0_iter4_reg;
reg   [5:0] lhs_reg_402_pp0_iter5_reg;
reg   [5:0] lhs_reg_402_pp0_iter6_reg;
reg   [5:0] lhs_reg_402_pp0_iter7_reg;
reg   [5:0] lhs_reg_402_pp0_iter8_reg;
reg   [5:0] lhs_reg_402_pp0_iter9_reg;
reg   [5:0] lhs_reg_402_pp0_iter10_reg;
wire   [6:0] zext_ln1525_fu_205_p1;
reg   [6:0] zext_ln1525_reg_407;
wire   [0:0] icmp_ln1069_fu_215_p2;
reg   [0:0] icmp_ln1069_reg_412;
wire  signed [6:0] used_idx_V_fu_228_p2;
reg  signed [6:0] used_idx_V_reg_417;
reg  signed [6:0] used_idx_V_reg_417_pp0_iter3_reg;
reg  signed [6:0] used_idx_V_reg_417_pp0_iter4_reg;
reg  signed [6:0] used_idx_V_reg_417_pp0_iter5_reg;
reg  signed [6:0] used_idx_V_reg_417_pp0_iter6_reg;
wire  signed [25:0] grp_fu_348_p2;
reg  signed [25:0] mul_ln1543_reg_427;
reg   [0:0] tmp_reg_432;
reg   [0:0] tmp_reg_432_pp0_iter6_reg;
reg   [0:0] tmp_reg_432_pp0_iter7_reg;
reg   [0:0] tmp_reg_432_pp0_iter8_reg;
reg   [0:0] tmp_reg_432_pp0_iter9_reg;
wire  signed [51:0] sext_ln1543_2_fu_244_p1;
reg   [51:0] mul_ln1543_1_reg_448;
reg   [15:0] tmp_14_reg_453;
wire   [15:0] select_ln1543_fu_281_p3;
reg   [15:0] select_ln1543_reg_458;
(* use_dsp48 = "no" *) wire   [17:0] phase_err_V_fu_303_p2;
reg   [17:0] phase_err_V_reg_463;
wire   [63:0] zext_ln588_fu_187_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln573_fu_313_p1;
reg   [5:0] op2_fu_82;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_i_V_3;
wire   [5:0] i_V_fu_181_p2;
wire  signed [5:0] select_ln3_cast_fu_163_p1;
wire   [6:0] ret_fu_209_p2;
wire   [6:0] select_ln10_fu_221_p3;
wire   [51:0] sub_ln1543_fu_266_p2;
wire   [15:0] tmp_13_fu_271_p4;
wire  signed [17:0] sext_ln1543_3_fu_287_p1;
wire   [17:0] sub_ln1543_1_fu_290_p2;
wire  signed [17:0] grp_fu_354_p3;
wire   [17:0] select_ln1543_1_fu_296_p3;
wire   [0:0] icmp_ln1057_fu_322_p2;
wire   [17:0] add_ln70_6_fu_327_p2;
wire   [0:0] icmp_ln1065_fu_308_p2;
wire   [17:0] add_ln70_5_fu_317_p2;
wire   [17:0] phase_err_V_2_fu_332_p3;
wire  signed [18:0] grp_fu_348_p0;
wire  signed [11:0] grp_fu_354_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_done_reg = 1'b0;
end

equalizer_mul_mul_19s_7s_26_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 26 ))
mul_mul_19s_7s_26_4_1_U110(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_348_p0),
    .din1(used_idx_V_fu_228_p2),
    .ce(1'b1),
    .dout(grp_fu_348_p2)
);

equalizer_mac_muladd_18s_7s_12s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 18 ))
mac_muladd_18s_7s_12s_18_4_1_U111(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln3),
    .din1(used_idx_V_reg_417_pp0_iter6_reg),
    .din2(grp_fu_354_p2),
    .ce(1'b1),
    .dout(grp_fu_354_p3)
);

equalizer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter10_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln8_fu_175_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            op2_fu_82 <= i_V_fu_181_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            op2_fu_82 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        lhs_reg_402_pp0_iter10_reg <= lhs_reg_402_pp0_iter9_reg;
        lhs_reg_402_pp0_iter2_reg <= lhs_reg_402;
        lhs_reg_402_pp0_iter3_reg <= lhs_reg_402_pp0_iter2_reg;
        lhs_reg_402_pp0_iter4_reg <= lhs_reg_402_pp0_iter3_reg;
        lhs_reg_402_pp0_iter5_reg <= lhs_reg_402_pp0_iter4_reg;
        lhs_reg_402_pp0_iter6_reg <= lhs_reg_402_pp0_iter5_reg;
        lhs_reg_402_pp0_iter7_reg <= lhs_reg_402_pp0_iter6_reg;
        lhs_reg_402_pp0_iter8_reg <= lhs_reg_402_pp0_iter7_reg;
        lhs_reg_402_pp0_iter9_reg <= lhs_reg_402_pp0_iter8_reg;
        mul_ln1543_1_reg_448 <= grp_fu_955_p_dout0;
        mul_ln1543_reg_427 <= grp_fu_348_p2;
        phase_err_V_reg_463 <= phase_err_V_fu_303_p2;
        select_ln1543_reg_458 <= select_ln1543_fu_281_p3;
        tmp_reg_432 <= grp_fu_348_p2[32'd25];
        tmp_reg_432_pp0_iter6_reg <= tmp_reg_432;
        tmp_reg_432_pp0_iter7_reg <= tmp_reg_432_pp0_iter6_reg;
        tmp_reg_432_pp0_iter8_reg <= tmp_reg_432_pp0_iter7_reg;
        tmp_reg_432_pp0_iter9_reg <= tmp_reg_432_pp0_iter8_reg;
        used_idx_V_reg_417 <= used_idx_V_fu_228_p2;
        used_idx_V_reg_417_pp0_iter3_reg <= used_idx_V_reg_417;
        used_idx_V_reg_417_pp0_iter4_reg <= used_idx_V_reg_417_pp0_iter3_reg;
        used_idx_V_reg_417_pp0_iter5_reg <= used_idx_V_reg_417_pp0_iter4_reg;
        used_idx_V_reg_417_pp0_iter6_reg <= used_idx_V_reg_417_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln1069_reg_412 <= icmp_ln1069_fu_215_p2;
        lhs_reg_402 <= lhs_fu_198_p3;
        sext_ln1543_cast_reg_383 <= sext_ln1543_cast_fu_159_p1;
        sext_ln70_cast_reg_378 <= sext_ln70_cast_fu_155_p1;
        zext_ln1525_reg_407[5 : 0] <= zext_ln1525_fu_205_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_432_pp0_iter7_reg == 1'd0))) begin
        tmp_14_reg_453 <= {{grp_fu_955_p_dout0[51:36]}};
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DATA_SC_IDX_48_V_ce0 = 1'b1;
    end else begin
        DATA_SC_IDX_48_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DATA_SC_IDX_52_V_ce0 = 1'b1;
    end else begin
        DATA_SC_IDX_52_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_175_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter10_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_V_3 = 6'd0;
    end else begin
        ap_sig_allocacmp_i_V_3 = op2_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        sym_phase_V_ce0 = 1'b1;
    end else begin
        sym_phase_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        sym_phase_V_we0 = 1'b1;
    end else begin
        sym_phase_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign DATA_SC_IDX_48_V_address0 = zext_ln588_fu_187_p1;

assign DATA_SC_IDX_52_V_address0 = zext_ln588_fu_187_p1;

assign add_ln70_5_fu_317_p2 = ($signed(phase_err_V_reg_463) + $signed(18'd258927));

assign add_ln70_6_fu_327_p2 = (phase_err_V_reg_463 + 18'd3217);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_348_p0 = sext_ln1543_cast_reg_383;

assign grp_fu_354_p2 = sext_ln70_cast_reg_378;

assign grp_fu_955_p_ce = 1'b1;

assign grp_fu_955_p_din0 = sext_ln1543_2_fu_244_p1;

assign grp_fu_955_p_din1 = 52'd70121916;

assign i_V_fu_181_p2 = (ap_sig_allocacmp_i_V_3 + 6'd1);

assign icmp_ln1057_fu_322_p2 = (($signed(phase_err_V_reg_463) < $signed(18'd260536)) ? 1'b1 : 1'b0);

assign icmp_ln1065_fu_308_p2 = (($signed(phase_err_V_reg_463) > $signed(18'd1608)) ? 1'b1 : 1'b0);

assign icmp_ln1069_fu_215_p2 = ((ret_fu_209_p2 < 7'd34) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_175_p2 = ((ap_sig_allocacmp_i_V_3 == select_ln3_cast_fu_163_p1) ? 1'b1 : 1'b0);

assign lhs_fu_198_p3 = ((ht[0:0] == 1'b1) ? DATA_SC_IDX_52_V_q0 : DATA_SC_IDX_48_V_q0);

assign phase_err_V_2_fu_332_p3 = ((icmp_ln1057_fu_322_p2[0:0] == 1'b1) ? add_ln70_6_fu_327_p2 : phase_err_V_reg_463);

assign phase_err_V_fu_303_p2 = ($signed(grp_fu_354_p3) + $signed(select_ln1543_1_fu_296_p3));

assign ret_fu_209_p2 = (zext_ln1525_fu_205_p1 + 7'd1);

assign select_ln10_fu_221_p3 = ((icmp_ln1069_reg_412[0:0] == 1'b1) ? 7'd1 : 7'd65);

assign select_ln1543_1_fu_296_p3 = ((tmp_reg_432_pp0_iter9_reg[0:0] == 1'b1) ? sub_ln1543_1_fu_290_p2 : sext_ln1543_3_fu_287_p1);

assign select_ln1543_fu_281_p3 = ((tmp_reg_432_pp0_iter8_reg[0:0] == 1'b1) ? tmp_13_fu_271_p4 : tmp_14_reg_453);

assign select_ln3_cast_fu_163_p1 = $signed(select_ln3);

assign sext_ln1543_2_fu_244_p1 = mul_ln1543_reg_427;

assign sext_ln1543_3_fu_287_p1 = $signed(select_ln1543_reg_458);

assign sext_ln1543_cast_fu_159_p1 = $signed(sext_ln1543);

assign sext_ln70_cast_fu_155_p1 = $signed(sext_ln70);

assign sub_ln1543_1_fu_290_p2 = ($signed(18'd0) - $signed(sext_ln1543_3_fu_287_p1));

assign sub_ln1543_fu_266_p2 = (52'd0 - mul_ln1543_1_reg_448);

assign sym_phase_V_address0 = zext_ln573_fu_313_p1;

assign sym_phase_V_d0 = ((icmp_ln1065_fu_308_p2[0:0] == 1'b1) ? add_ln70_5_fu_317_p2 : phase_err_V_2_fu_332_p3);

assign tmp_13_fu_271_p4 = {{sub_ln1543_fu_266_p2[51:36]}};

assign used_idx_V_fu_228_p2 = (select_ln10_fu_221_p3 + zext_ln1525_reg_407);

assign zext_ln1525_fu_205_p1 = lhs_fu_198_p3;

assign zext_ln573_fu_313_p1 = lhs_reg_402_pp0_iter10_reg;

assign zext_ln588_fu_187_p1 = ap_sig_allocacmp_i_V_3;

always @ (posedge ap_clk) begin
    zext_ln1525_reg_407[6] <= 1'b0;
end

endmodule //equalizer_equalizer_Pipeline_lvpe_corr
