// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module equalizer_equalizer_Pipeline_lts_pilot (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        new_lts_Addr_A,
        new_lts_EN_A,
        new_lts_WEN_A,
        new_lts_Din_A,
        new_lts_Dout_A,
        lts_pilot_M_imag_V_3_024_out,
        lts_pilot_M_imag_V_3_024_out_ap_vld,
        lts_pilot_M_imag_V_2_023_out,
        lts_pilot_M_imag_V_2_023_out_ap_vld,
        lts_pilot_M_imag_V_1_022_out,
        lts_pilot_M_imag_V_1_022_out_ap_vld,
        lts_pilot_M_imag_V_0_021_out,
        lts_pilot_M_imag_V_0_021_out_ap_vld,
        lts_pilot_M_real_V_3_020_out,
        lts_pilot_M_real_V_3_020_out_ap_vld,
        lts_pilot_M_real_V_2_019_out,
        lts_pilot_M_real_V_2_019_out_ap_vld,
        lts_pilot_M_real_V_1_018_out,
        lts_pilot_M_real_V_1_018_out_ap_vld,
        lts_pilot_M_real_V_0_017_out,
        lts_pilot_M_real_V_0_017_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] new_lts_Addr_A;
output   new_lts_EN_A;
output  [3:0] new_lts_WEN_A;
output  [31:0] new_lts_Din_A;
input  [31:0] new_lts_Dout_A;
output  [15:0] lts_pilot_M_imag_V_3_024_out;
output   lts_pilot_M_imag_V_3_024_out_ap_vld;
output  [15:0] lts_pilot_M_imag_V_2_023_out;
output   lts_pilot_M_imag_V_2_023_out_ap_vld;
output  [15:0] lts_pilot_M_imag_V_1_022_out;
output   lts_pilot_M_imag_V_1_022_out_ap_vld;
output  [15:0] lts_pilot_M_imag_V_0_021_out;
output   lts_pilot_M_imag_V_0_021_out_ap_vld;
output  [15:0] lts_pilot_M_real_V_3_020_out;
output   lts_pilot_M_real_V_3_020_out_ap_vld;
output  [15:0] lts_pilot_M_real_V_2_019_out;
output   lts_pilot_M_real_V_2_019_out_ap_vld;
output  [15:0] lts_pilot_M_real_V_1_018_out;
output   lts_pilot_M_real_V_1_018_out_ap_vld;
output  [15:0] lts_pilot_M_real_V_0_017_out;
output   lts_pilot_M_real_V_0_017_out_ap_vld;

reg ap_idle;
reg new_lts_EN_A;
reg lts_pilot_M_imag_V_3_024_out_ap_vld;
reg lts_pilot_M_imag_V_2_023_out_ap_vld;
reg lts_pilot_M_imag_V_1_022_out_ap_vld;
reg lts_pilot_M_imag_V_0_021_out_ap_vld;
reg lts_pilot_M_real_V_3_020_out_ap_vld;
reg lts_pilot_M_real_V_2_019_out_ap_vld;
reg lts_pilot_M_real_V_1_018_out_ap_vld;
reg lts_pilot_M_real_V_0_017_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1057_fu_197_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln1057_reg_378;
wire   [1:0] trunc_ln573_fu_209_p1;
reg   [1:0] trunc_ln573_reg_382;
reg   [1:0] trunc_ln573_reg_382_pp0_iter1_reg;
wire   [63:0] zext_ln573_fu_227_p1;
wire    ap_block_pp0_stage0;
reg   [2:0] j_V_fu_84;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_j_V_1;
wire   [2:0] add_ln870_fu_203_p2;
reg   [15:0] lts_pilot_M_real_V_1_fu_88;
wire   [15:0] lts_pilot_M_real_V_1_5_fu_237_p1;
reg   [15:0] lts_pilot_M_real_V_1_1_fu_92;
reg   [15:0] lts_pilot_M_real_V_1_2_fu_96;
reg   [15:0] lts_pilot_M_real_V_1_3_fu_100;
reg   [15:0] lts_pilot_M_imag_V_1_fu_104;
reg   [15:0] lts_pilot_M_imag_V_1_1_fu_108;
reg   [15:0] lts_pilot_M_imag_V_1_2_fu_112;
reg   [15:0] lts_pilot_M_imag_V_1_3_fu_116;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] new_lts_Addr_A_orig;
wire   [1:0] tmp_7_fu_213_p5;
wire   [5:0] tmp_7_fu_213_p6;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

equalizer_mux_42_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 6 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 6 ))
mux_42_6_1_1_U1(
    .din0(6'd7),
    .din1(6'd21),
    .din2(6'd43),
    .din3(6'd57),
    .din4(tmp_7_fu_213_p5),
    .dout(tmp_7_fu_213_p6)
);

equalizer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1057_fu_197_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_V_fu_84 <= add_ln870_fu_203_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_V_fu_84 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln1057_reg_378 <= icmp_ln1057_fu_197_p2;
        trunc_ln573_reg_382_pp0_iter1_reg <= trunc_ln573_reg_382;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln573_reg_382_pp0_iter1_reg == 2'd1))) begin
        lts_pilot_M_imag_V_1_1_fu_108 <= {{new_lts_Dout_A[31:16]}};
        lts_pilot_M_real_V_1_1_fu_92 <= lts_pilot_M_real_V_1_5_fu_237_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln573_reg_382_pp0_iter1_reg == 2'd2))) begin
        lts_pilot_M_imag_V_1_2_fu_112 <= {{new_lts_Dout_A[31:16]}};
        lts_pilot_M_real_V_1_2_fu_96 <= lts_pilot_M_real_V_1_5_fu_237_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln573_reg_382_pp0_iter1_reg == 2'd3))) begin
        lts_pilot_M_imag_V_1_3_fu_116 <= {{new_lts_Dout_A[31:16]}};
        lts_pilot_M_real_V_1_3_fu_100 <= lts_pilot_M_real_V_1_5_fu_237_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln573_reg_382_pp0_iter1_reg == 2'd0))) begin
        lts_pilot_M_imag_V_1_fu_104 <= {{new_lts_Dout_A[31:16]}};
        lts_pilot_M_real_V_1_fu_88 <= lts_pilot_M_real_V_1_5_fu_237_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_fu_197_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln573_reg_382 <= trunc_ln573_fu_209_p1;
    end
end

always @ (*) begin
    if (((icmp_ln1057_fu_197_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_V_1 = 3'd0;
    end else begin
        ap_sig_allocacmp_j_V_1 = j_V_fu_84;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1057_reg_378 == 1'd1))) begin
        lts_pilot_M_imag_V_0_021_out_ap_vld = 1'b1;
    end else begin
        lts_pilot_M_imag_V_0_021_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1057_reg_378 == 1'd1))) begin
        lts_pilot_M_imag_V_1_022_out_ap_vld = 1'b1;
    end else begin
        lts_pilot_M_imag_V_1_022_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1057_reg_378 == 1'd1))) begin
        lts_pilot_M_imag_V_2_023_out_ap_vld = 1'b1;
    end else begin
        lts_pilot_M_imag_V_2_023_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1057_reg_378 == 1'd1))) begin
        lts_pilot_M_imag_V_3_024_out_ap_vld = 1'b1;
    end else begin
        lts_pilot_M_imag_V_3_024_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1057_reg_378 == 1'd1))) begin
        lts_pilot_M_real_V_0_017_out_ap_vld = 1'b1;
    end else begin
        lts_pilot_M_real_V_0_017_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1057_reg_378 == 1'd1))) begin
        lts_pilot_M_real_V_1_018_out_ap_vld = 1'b1;
    end else begin
        lts_pilot_M_real_V_1_018_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1057_reg_378 == 1'd1))) begin
        lts_pilot_M_real_V_2_019_out_ap_vld = 1'b1;
    end else begin
        lts_pilot_M_real_V_2_019_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1057_reg_378 == 1'd1))) begin
        lts_pilot_M_real_V_3_020_out_ap_vld = 1'b1;
    end else begin
        lts_pilot_M_real_V_3_020_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        new_lts_EN_A = 1'b1;
    end else begin
        new_lts_EN_A = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln870_fu_203_p2 = (ap_sig_allocacmp_j_V_1 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln1057_fu_197_p2 = ((ap_sig_allocacmp_j_V_1 == 3'd4) ? 1'b1 : 1'b0);

assign lts_pilot_M_imag_V_0_021_out = lts_pilot_M_imag_V_1_fu_104;

assign lts_pilot_M_imag_V_1_022_out = lts_pilot_M_imag_V_1_1_fu_108;

assign lts_pilot_M_imag_V_2_023_out = lts_pilot_M_imag_V_1_2_fu_112;

assign lts_pilot_M_imag_V_3_024_out = lts_pilot_M_imag_V_1_3_fu_116;

assign lts_pilot_M_real_V_0_017_out = lts_pilot_M_real_V_1_fu_88;

assign lts_pilot_M_real_V_1_018_out = lts_pilot_M_real_V_1_1_fu_92;

assign lts_pilot_M_real_V_1_5_fu_237_p1 = new_lts_Dout_A[15:0];

assign lts_pilot_M_real_V_2_019_out = lts_pilot_M_real_V_1_2_fu_96;

assign lts_pilot_M_real_V_3_020_out = lts_pilot_M_real_V_1_3_fu_100;

assign new_lts_Addr_A = new_lts_Addr_A_orig << 32'd2;

assign new_lts_Addr_A_orig = zext_ln573_fu_227_p1;

assign new_lts_Din_A = 32'd0;

assign new_lts_WEN_A = 4'd0;

assign tmp_7_fu_213_p5 = ap_sig_allocacmp_j_V_1[1:0];

assign trunc_ln573_fu_209_p1 = ap_sig_allocacmp_j_V_1[1:0];

assign zext_ln573_fu_227_p1 = tmp_7_fu_213_p6;

endmodule //equalizer_equalizer_Pipeline_lts_pilot
