// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module equalizer_rotate (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        phase,
        in_iq_M_real,
        in_iq_M_imag,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [15:0] phase;
input  [15:0] in_iq_M_real;
input  [15:0] in_iq_M_imag;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_subdone;
wire   [8:0] rotate_I_V_address0;
reg    rotate_I_V_ce0;
wire   [11:0] rotate_I_V_q0;
wire   [8:0] rotate_Q_V_address0;
reg    rotate_Q_V_ce0;
wire   [10:0] rotate_Q_V_q0;
reg   [15:0] in_iq_M_imag_read_reg_589;
wire    ap_block_pp0_stage0_11001;
reg   [15:0] in_iq_M_imag_read_reg_589_pp0_iter1_reg;
reg   [15:0] in_iq_M_imag_read_reg_589_pp0_iter2_reg;
reg   [15:0] in_iq_M_imag_read_reg_589_pp0_iter3_reg;
reg   [15:0] in_iq_M_real_read_reg_594;
reg   [15:0] in_iq_M_real_read_reg_594_pp0_iter1_reg;
reg   [15:0] in_iq_M_real_read_reg_594_pp0_iter2_reg;
wire   [0:0] tmp_10_fu_126_p3;
reg   [0:0] tmp_10_reg_599;
wire   [0:0] icmp_ln1069_fu_148_p2;
reg   [0:0] icmp_ln1069_reg_607;
wire   [8:0] actual_phase_V_fu_154_p1;
reg   [8:0] actual_phase_V_reg_614;
wire   [0:0] icmp_ln1069_1_fu_158_p2;
reg   [0:0] icmp_ln1069_1_reg_622;
wire   [0:0] icmp_ln1069_2_fu_164_p2;
reg   [0:0] icmp_ln1069_2_reg_628;
wire   [2:0] quadrant_V_6_fu_276_p3;
reg   [2:0] quadrant_V_6_reg_633;
reg   [2:0] quadrant_V_6_reg_633_pp0_iter2_reg;
reg   [11:0] rhs_reg_654;
reg   [10:0] rhs_1_reg_663;
wire  signed [27:0] sext_ln1524_fu_517_p1;
wire  signed [27:0] sext_ln1524_1_fu_520_p1;
reg  signed [27:0] sext_ln1524_1_reg_676;
wire  signed [27:0] sext_ln1524_3_fu_524_p1;
reg  signed [27:0] sext_ln1524_3_reg_682;
wire  signed [27:0] sext_ln1524_2_fu_528_p1;
wire  signed [27:0] grp_fu_561_p2;
wire  signed [27:0] grp_fu_567_p2;
wire   [63:0] zext_ln573_fu_284_p1;
wire    ap_block_pp0_stage0;
wire   [15:0] phase_abs_V_fu_134_p2;
wire   [15:0] phase_abs_V_1_fu_140_p3;
wire   [0:0] xor_ln1069_fu_213_p2;
wire   [0:0] xor_ln1069_1_fu_223_p2;
wire   [0:0] and_ln1069_1_fu_228_p2;
wire   [8:0] actual_phase_V_2_fu_196_p2;
wire   [8:0] actual_phase_V_1_fu_184_p2;
wire   [0:0] and_ln1069_fu_218_p2;
wire   [8:0] actual_phase_V_3_fu_208_p2;
wire   [0:0] or_ln1069_fu_241_p2;
wire   [8:0] select_ln1069_fu_233_p3;
wire   [8:0] select_ln1069_1_fu_247_p3;
wire   [2:0] quadrant_V_fu_170_p3;
wire   [2:0] quadrant_V_3_fu_201_p3;
wire   [2:0] quadrant_V_1_fu_177_p3;
wire   [2:0] quadrant_V_4_fu_261_p3;
wire   [2:0] quadrant_V_2_fu_189_p3;
wire   [2:0] quadrant_V_5_fu_268_p3;
wire   [8:0] actual_phase_V_4_fu_253_p3;
wire   [12:0] zext_ln225_fu_290_p1;
wire  signed [12:0] ret_fu_293_p2;
wire   [11:0] zext_ln225_1_fu_303_p1;
wire  signed [11:0] ret_1_fu_306_p2;
wire  signed [15:0] sext_ln70_fu_299_p1;
wire   [27:0] tmp_fu_312_p3;
wire   [26:0] tmp_1_fu_324_p4;
wire   [27:0] tmp_4_fu_336_p4;
wire  signed [15:0] sext_ln70_1_fu_349_p1;
wire   [27:0] tmp_5_fu_353_p3;
wire   [26:0] tmp_3_fu_364_p3;
wire   [27:0] tmp_6_fu_375_p4;
wire   [0:0] icmp_ln23_2_fu_416_p2;
wire  signed [28:0] tmp_7_fu_384_p1;
wire   [28:0] tmp_8_fu_388_p4;
wire   [0:0] icmp_ln23_1_fu_411_p2;
wire   [0:0] icmp_ln23_fu_406_p2;
wire   [28:0] tmp_9_fu_398_p3;
wire  signed [28:0] tmp_2_fu_320_p1;
wire   [0:0] or_ln23_fu_429_p2;
wire   [28:0] select_ln23_fu_421_p3;
wire   [28:0] select_ln23_1_fu_435_p3;
wire   [0:0] icmp_ln23_3_fu_451_p2;
wire   [28:0] zext_ln1526_2_fu_371_p1;
wire   [28:0] select_ln23_2_fu_443_p3;
wire   [0:0] icmp_ln23_4_fu_464_p2;
wire   [28:0] zext_ln1526_1_fu_360_p1;
wire   [28:0] select_ln23_3_fu_456_p3;
wire   [0:0] icmp_ln23_5_fu_477_p2;
wire   [28:0] zext_ln1526_fu_345_p1;
wire   [28:0] select_ln23_4_fu_469_p3;
wire   [0:0] icmp_ln23_6_fu_490_p2;
wire   [28:0] tmp_3_cast_fu_332_p1;
wire   [28:0] select_ln23_5_fu_482_p3;
wire   [28:0] rot_iq_fu_495_p3;
wire  signed [15:0] rhs_2_fu_503_p1;
wire  signed [12:0] trunc_ln52_1_fu_507_p4;
wire  signed [27:0] grp_fu_573_p3;
wire  signed [27:0] grp_fu_581_p3;
wire  signed [15:0] grp_fu_561_p0;
wire  signed [15:0] grp_fu_567_p1;
wire  signed [15:0] grp_fu_573_p0;
wire  signed [12:0] grp_fu_573_p1;
wire  signed [15:0] grp_fu_581_p0;
wire  signed [15:0] grp_fu_581_p1;
reg    grp_fu_561_ce;
reg    grp_fu_567_ce;
reg    grp_fu_573_ce;
reg    grp_fu_581_ce;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to6;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
end

equalizer_rotate_rotate_I_V #(
    .DataWidth( 12 ),
    .AddressRange( 403 ),
    .AddressWidth( 9 ))
rotate_I_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rotate_I_V_address0),
    .ce0(rotate_I_V_ce0),
    .q0(rotate_I_V_q0)
);

equalizer_rotate_rotate_Q_V #(
    .DataWidth( 11 ),
    .AddressRange( 403 ),
    .AddressWidth( 9 ))
rotate_Q_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rotate_Q_V_address0),
    .ce0(rotate_Q_V_ce0),
    .q0(rotate_Q_V_q0)
);

equalizer_mul_mul_16s_16s_28_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 28 ))
mul_mul_16s_16s_28_4_1_U66(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_561_p0),
    .din1(rhs_2_fu_503_p1),
    .ce(grp_fu_561_ce),
    .dout(grp_fu_561_p2)
);

equalizer_mul_mul_13s_16s_28_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 28 ))
mul_mul_13s_16s_28_4_1_U67(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln52_1_fu_507_p4),
    .din1(grp_fu_567_p1),
    .ce(grp_fu_567_ce),
    .dout(grp_fu_567_p2)
);

equalizer_mac_mulsub_16s_13s_28s_28_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 13 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
mac_mulsub_16s_13s_28s_28_4_1_U68(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_573_p0),
    .din1(grp_fu_573_p1),
    .din2(grp_fu_561_p2),
    .ce(grp_fu_573_ce),
    .dout(grp_fu_573_p3)
);

equalizer_mac_muladd_16s_16s_28s_28_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
mac_muladd_16s_16s_28s_28_4_1_U69(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_581_p0),
    .din1(grp_fu_581_p1),
    .din2(grp_fu_567_p2),
    .ce(grp_fu_581_ce),
    .dout(grp_fu_581_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        actual_phase_V_reg_614 <= actual_phase_V_fu_154_p1;
        icmp_ln1069_1_reg_622 <= icmp_ln1069_1_fu_158_p2;
        icmp_ln1069_2_reg_628 <= icmp_ln1069_2_fu_164_p2;
        icmp_ln1069_reg_607 <= icmp_ln1069_fu_148_p2;
        in_iq_M_imag_read_reg_589 <= in_iq_M_imag;
        in_iq_M_imag_read_reg_589_pp0_iter1_reg <= in_iq_M_imag_read_reg_589;
        in_iq_M_real_read_reg_594 <= in_iq_M_real;
        in_iq_M_real_read_reg_594_pp0_iter1_reg <= in_iq_M_real_read_reg_594;
        quadrant_V_6_reg_633 <= quadrant_V_6_fu_276_p3;
        tmp_10_reg_599 <= phase[32'd15];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        in_iq_M_imag_read_reg_589_pp0_iter2_reg <= in_iq_M_imag_read_reg_589_pp0_iter1_reg;
        in_iq_M_imag_read_reg_589_pp0_iter3_reg <= in_iq_M_imag_read_reg_589_pp0_iter2_reg;
        in_iq_M_real_read_reg_594_pp0_iter2_reg <= in_iq_M_real_read_reg_594_pp0_iter1_reg;
        quadrant_V_6_reg_633_pp0_iter2_reg <= quadrant_V_6_reg_633;
        rhs_1_reg_663 <= rotate_Q_V_q0;
        rhs_reg_654 <= rotate_I_V_q0;
        sext_ln1524_1_reg_676 <= sext_ln1524_1_fu_520_p1;
        sext_ln1524_3_reg_682 <= sext_ln1524_3_fu_524_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to6 = 1'b1;
    end else begin
        ap_idle_pp0_0to6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to6 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_561_ce = 1'b1;
    end else begin
        grp_fu_561_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_567_ce = 1'b1;
    end else begin
        grp_fu_567_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_573_ce = 1'b1;
    end else begin
        grp_fu_573_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_581_ce = 1'b1;
    end else begin
        grp_fu_581_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rotate_I_V_ce0 = 1'b1;
    end else begin
        rotate_I_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rotate_Q_V_ce0 = 1'b1;
    end else begin
        rotate_Q_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign actual_phase_V_1_fu_184_p2 = ($signed(9'd292) - $signed(actual_phase_V_reg_614));

assign actual_phase_V_2_fu_196_p2 = (actual_phase_V_reg_614 + 9'd220);

assign actual_phase_V_3_fu_208_p2 = (9'd72 - actual_phase_V_reg_614);

assign actual_phase_V_4_fu_253_p3 = ((or_ln1069_fu_241_p2[0:0] == 1'b1) ? select_ln1069_fu_233_p3 : select_ln1069_1_fu_247_p3);

assign actual_phase_V_fu_154_p1 = phase_abs_V_1_fu_140_p3[8:0];

assign and_ln1069_1_fu_228_p2 = (xor_ln1069_1_fu_223_p2 & icmp_ln1069_2_reg_628);

assign and_ln1069_fu_218_p2 = (xor_ln1069_fu_213_p2 & icmp_ln1069_1_reg_622);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return_0 = {{grp_fu_573_p3[27:12]}};

assign ap_return_1 = {{grp_fu_581_p3[27:12]}};

assign grp_fu_561_p0 = sext_ln1524_fu_517_p1;

assign grp_fu_567_p1 = sext_ln1524_fu_517_p1;

assign grp_fu_573_p0 = sext_ln1524_2_fu_528_p1;

assign grp_fu_573_p1 = sext_ln1524_3_reg_682;

assign grp_fu_581_p0 = sext_ln1524_2_fu_528_p1;

assign grp_fu_581_p1 = sext_ln1524_1_reg_676;

assign icmp_ln1069_1_fu_158_p2 = ((phase_abs_V_1_fu_140_p3 < 16'd805) ? 1'b1 : 1'b0);

assign icmp_ln1069_2_fu_164_p2 = ((phase_abs_V_1_fu_140_p3 < 16'd1207) ? 1'b1 : 1'b0);

assign icmp_ln1069_fu_148_p2 = ((phase_abs_V_1_fu_140_p3 < 16'd403) ? 1'b1 : 1'b0);

assign icmp_ln23_1_fu_411_p2 = ((quadrant_V_6_reg_633_pp0_iter2_reg == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln23_2_fu_416_p2 = ((quadrant_V_6_reg_633_pp0_iter2_reg == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln23_3_fu_451_p2 = ((quadrant_V_6_reg_633_pp0_iter2_reg == 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln23_4_fu_464_p2 = ((quadrant_V_6_reg_633_pp0_iter2_reg == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln23_5_fu_477_p2 = ((quadrant_V_6_reg_633_pp0_iter2_reg == 3'd1) ? 1'b1 : 1'b0);

assign icmp_ln23_6_fu_490_p2 = ((quadrant_V_6_reg_633_pp0_iter2_reg == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_406_p2 = ((quadrant_V_6_reg_633_pp0_iter2_reg == 3'd6) ? 1'b1 : 1'b0);

assign or_ln1069_fu_241_p2 = (and_ln1069_fu_218_p2 | and_ln1069_1_fu_228_p2);

assign or_ln23_fu_429_p2 = (icmp_ln23_2_fu_416_p2 | icmp_ln23_1_fu_411_p2);

assign phase_abs_V_1_fu_140_p3 = ((tmp_10_fu_126_p3[0:0] == 1'b1) ? phase_abs_V_fu_134_p2 : phase);

assign phase_abs_V_fu_134_p2 = (16'd0 - phase);

assign quadrant_V_1_fu_177_p3 = ((tmp_10_reg_599[0:0] == 1'b1) ? 3'd5 : 3'd1);

assign quadrant_V_2_fu_189_p3 = ((tmp_10_reg_599[0:0] == 1'b1) ? 3'd6 : 3'd2);

assign quadrant_V_3_fu_201_p3 = ((tmp_10_reg_599[0:0] == 1'b1) ? 3'd7 : 3'd3);

assign quadrant_V_4_fu_261_p3 = ((icmp_ln1069_reg_607[0:0] == 1'b1) ? quadrant_V_fu_170_p3 : quadrant_V_3_fu_201_p3);

assign quadrant_V_5_fu_268_p3 = ((and_ln1069_fu_218_p2[0:0] == 1'b1) ? quadrant_V_1_fu_177_p3 : quadrant_V_4_fu_261_p3);

assign quadrant_V_6_fu_276_p3 = ((and_ln1069_1_fu_228_p2[0:0] == 1'b1) ? quadrant_V_2_fu_189_p3 : quadrant_V_5_fu_268_p3);

assign quadrant_V_fu_170_p3 = ((tmp_10_reg_599[0:0] == 1'b1) ? 3'd4 : 3'd0);

assign ret_1_fu_306_p2 = (12'd0 - zext_ln225_1_fu_303_p1);

assign ret_fu_293_p2 = (13'd0 - zext_ln225_fu_290_p1);

assign rhs_2_fu_503_p1 = rot_iq_fu_495_p3[15:0];

assign rot_iq_fu_495_p3 = ((icmp_ln23_6_fu_490_p2[0:0] == 1'b1) ? tmp_3_cast_fu_332_p1 : select_ln23_5_fu_482_p3);

assign rotate_I_V_address0 = zext_ln573_fu_284_p1;

assign rotate_Q_V_address0 = zext_ln573_fu_284_p1;

assign select_ln1069_1_fu_247_p3 = ((icmp_ln1069_reg_607[0:0] == 1'b1) ? actual_phase_V_reg_614 : actual_phase_V_3_fu_208_p2);

assign select_ln1069_fu_233_p3 = ((and_ln1069_1_fu_228_p2[0:0] == 1'b1) ? actual_phase_V_2_fu_196_p2 : actual_phase_V_1_fu_184_p2);

assign select_ln23_1_fu_435_p3 = ((icmp_ln23_fu_406_p2[0:0] == 1'b1) ? tmp_9_fu_398_p3 : tmp_2_fu_320_p1);

assign select_ln23_2_fu_443_p3 = ((or_ln23_fu_429_p2[0:0] == 1'b1) ? select_ln23_fu_421_p3 : select_ln23_1_fu_435_p3);

assign select_ln23_3_fu_456_p3 = ((icmp_ln23_3_fu_451_p2[0:0] == 1'b1) ? zext_ln1526_2_fu_371_p1 : select_ln23_2_fu_443_p3);

assign select_ln23_4_fu_469_p3 = ((icmp_ln23_4_fu_464_p2[0:0] == 1'b1) ? zext_ln1526_1_fu_360_p1 : select_ln23_3_fu_456_p3);

assign select_ln23_5_fu_482_p3 = ((icmp_ln23_5_fu_477_p2[0:0] == 1'b1) ? zext_ln1526_fu_345_p1 : select_ln23_4_fu_469_p3);

assign select_ln23_fu_421_p3 = ((icmp_ln23_2_fu_416_p2[0:0] == 1'b1) ? tmp_7_fu_384_p1 : tmp_8_fu_388_p4);

assign sext_ln1524_1_fu_520_p1 = rhs_2_fu_503_p1;

assign sext_ln1524_2_fu_528_p1 = $signed(in_iq_M_imag_read_reg_589_pp0_iter3_reg);

assign sext_ln1524_3_fu_524_p1 = trunc_ln52_1_fu_507_p4;

assign sext_ln1524_fu_517_p1 = $signed(in_iq_M_real_read_reg_594_pp0_iter2_reg);

assign sext_ln70_1_fu_349_p1 = ret_1_fu_306_p2;

assign sext_ln70_fu_299_p1 = ret_fu_293_p2;

assign tmp_10_fu_126_p3 = phase[32'd15];

assign tmp_1_fu_324_p4 = {{{rhs_1_reg_663}, {4'd0}}, {rhs_reg_654}};

assign tmp_2_fu_320_p1 = $signed(tmp_fu_312_p3);

assign tmp_3_cast_fu_332_p1 = tmp_1_fu_324_p4;

assign tmp_3_fu_364_p3 = {{rhs_1_reg_663}, {sext_ln70_fu_299_p1}};

assign tmp_4_fu_336_p4 = {{{rhs_reg_654}, {4'd0}}, {zext_ln225_1_fu_303_p1}};

assign tmp_5_fu_353_p3 = {{rhs_reg_654}, {sext_ln70_1_fu_349_p1}};

assign tmp_6_fu_375_p4 = {{{ret_1_fu_306_p2}, {4'd0}}, {rhs_reg_654}};

assign tmp_7_fu_384_p1 = $signed(tmp_6_fu_375_p4);

assign tmp_8_fu_388_p4 = {{{ret_fu_293_p2}, {4'd0}}, {zext_ln225_1_fu_303_p1}};

assign tmp_9_fu_398_p3 = {{ret_fu_293_p2}, {sext_ln70_1_fu_349_p1}};

assign tmp_fu_312_p3 = {{ret_1_fu_306_p2}, {sext_ln70_fu_299_p1}};

assign trunc_ln52_1_fu_507_p4 = {{rot_iq_fu_495_p3[28:16]}};

assign xor_ln1069_1_fu_223_p2 = (icmp_ln1069_1_reg_622 ^ 1'd1);

assign xor_ln1069_fu_213_p2 = (icmp_ln1069_reg_607 ^ 1'd1);

assign zext_ln1526_1_fu_360_p1 = tmp_5_fu_353_p3;

assign zext_ln1526_2_fu_371_p1 = tmp_3_fu_364_p3;

assign zext_ln1526_fu_345_p1 = tmp_4_fu_336_p4;

assign zext_ln225_1_fu_303_p1 = rhs_1_reg_663;

assign zext_ln225_fu_290_p1 = rhs_reg_654;

assign zext_ln573_fu_284_p1 = actual_phase_V_4_fu_253_p3;

endmodule //equalizer_rotate
