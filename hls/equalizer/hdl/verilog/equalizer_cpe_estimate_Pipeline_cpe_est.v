// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module equalizer_cpe_estimate_Pipeline_cpe_est (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        sample_in_M_real_0_0_0_address0,
        sample_in_M_real_0_0_0_ce0,
        sample_in_M_real_0_0_0_q0,
        sample_in_M_imag_0_0_0_address0,
        sample_in_M_imag_0_0_0_ce0,
        sample_in_M_imag_0_0_0_q0,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_out,
        p_out_ap_vld,
        p_out1,
        p_out1_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] p_read8;
input  [0:0] p_read9;
input  [0:0] p_read10;
input  [0:0] p_read11;
output  [5:0] sample_in_M_real_0_0_0_address0;
output   sample_in_M_real_0_0_0_ce0;
input  [15:0] sample_in_M_real_0_0_0_q0;
output  [5:0] sample_in_M_imag_0_0_0_address0;
output   sample_in_M_imag_0_0_0_ce0;
input  [15:0] sample_in_M_imag_0_0_0_q0;
input  [15:0] p_read;
input  [15:0] p_read1;
input  [15:0] p_read2;
input  [15:0] p_read3;
input  [15:0] p_read4;
input  [15:0] p_read5;
input  [15:0] p_read6;
input  [15:0] p_read7;
output  [31:0] p_out;
output   p_out_ap_vld;
output  [31:0] p_out1;
output   p_out1_ap_vld;

reg ap_idle;
reg sample_in_M_real_0_0_0_ce0;
reg sample_in_M_imag_0_0_0_ce0;
reg p_out_ap_vld;
reg p_out1_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1057_fu_230_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln1057_reg_511;
reg   [0:0] icmp_ln1057_reg_511_pp0_iter1_reg;
reg   [0:0] icmp_ln1057_reg_511_pp0_iter2_reg;
reg   [0:0] icmp_ln1057_reg_511_pp0_iter3_reg;
reg   [0:0] icmp_ln1057_reg_511_pp0_iter4_reg;
wire   [1:0] trunc_ln1049_fu_242_p1;
reg   [1:0] trunc_ln1049_reg_515;
reg   [1:0] trunc_ln1049_reg_515_pp0_iter1_reg;
wire   [63:0] zext_ln573_fu_260_p1;
reg   [63:0] zext_ln573_reg_522;
reg   [63:0] zext_ln573_reg_522_pp0_iter1_reg;
reg   [15:0] input_i_V_reg_532;
wire   [0:0] tmp_s_fu_270_p6;
reg   [0:0] tmp_s_reg_538;
wire  signed [31:0] sext_ln225_fu_309_p1;
wire  signed [31:0] sext_ln225_6_fu_313_p1;
reg  signed [31:0] sext_ln225_6_reg_554;
wire  signed [31:0] sext_ln225_8_fu_317_p1;
reg  signed [31:0] sext_ln225_8_reg_560;
wire  signed [31:0] sext_ln225_7_fu_334_p1;
wire  signed [31:0] grp_fu_399_p2;
wire    ap_block_pp0_stage0;
reg   [31:0] empty_fu_88;
wire   [31:0] add_ln870_4_fu_375_p2;
wire    ap_loop_init;
reg   [31:0] empty_38_fu_92;
wire   [31:0] add_ln870_3_fu_369_p2;
reg   [2:0] i_V_fu_96;
reg   [2:0] ap_sig_allocacmp_i_V_7;
wire   [2:0] add_ln870_fu_236_p2;
wire    ap_block_pp0_stage0_01001;
wire   [1:0] tmp_2_fu_246_p5;
wire   [5:0] tmp_2_fu_246_p6;
wire   [15:0] input_i_V_4_fu_279_p2;
wire   [15:0] input_i_V_6_fu_284_p3;
wire  signed [15:0] rhs_fu_291_p6;
wire  signed [15:0] rhs_9_fu_300_p6;
wire   [15:0] input_q_V_fu_321_p2;
wire   [15:0] input_q_V_6_fu_327_p3;
wire  signed [31:0] grp_fu_405_p2;
wire  signed [31:0] grp_fu_412_p3;
wire   [30:0] out_i_V_fu_347_p4;
wire  signed [32:0] grp_fu_420_p3;
wire  signed [31:0] sext_ln1676_fu_356_p1;
wire   [31:0] out_q_V_fu_360_p4;
wire  signed [15:0] grp_fu_399_p1;
wire  signed [15:0] grp_fu_405_p1;
wire  signed [15:0] grp_fu_412_p0;
wire  signed [15:0] grp_fu_412_p1;
wire  signed [15:0] grp_fu_420_p0;
wire  signed [15:0] grp_fu_420_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_done_reg = 1'b0;
end

equalizer_mux_42_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 6 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 6 ))
mux_42_6_1_1_U14(
    .din0(6'd7),
    .din1(6'd21),
    .din2(6'd43),
    .din3(6'd57),
    .din4(tmp_2_fu_246_p5),
    .dout(tmp_2_fu_246_p6)
);

equalizer_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U15(
    .din0(p_read8),
    .din1(p_read9),
    .din2(p_read10),
    .din3(p_read11),
    .din4(trunc_ln1049_reg_515_pp0_iter1_reg),
    .dout(tmp_s_fu_270_p6)
);

equalizer_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_42_16_1_1_U16(
    .din0(p_read),
    .din1(p_read1),
    .din2(p_read2),
    .din3(p_read3),
    .din4(trunc_ln1049_reg_515_pp0_iter1_reg),
    .dout(rhs_fu_291_p6)
);

equalizer_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_42_16_1_1_U17(
    .din0(p_read4),
    .din1(p_read5),
    .din2(p_read6),
    .din3(p_read7),
    .din4(trunc_ln1049_reg_515_pp0_iter1_reg),
    .dout(rhs_9_fu_300_p6)
);

equalizer_mul_mul_16s_16s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16s_16s_32_4_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(rhs_fu_291_p6),
    .din1(grp_fu_399_p1),
    .ce(1'b1),
    .dout(grp_fu_399_p2)
);

equalizer_mul_mul_16s_16s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16s_16s_32_4_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(rhs_9_fu_300_p6),
    .din1(grp_fu_405_p1),
    .ce(1'b1),
    .dout(grp_fu_405_p2)
);

equalizer_mac_mulsub_16s_16s_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_mulsub_16s_16s_32s_32_4_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_412_p0),
    .din1(grp_fu_412_p1),
    .din2(grp_fu_399_p2),
    .ce(1'b1),
    .dout(grp_fu_412_p3)
);

equalizer_mac_muladd_16s_16s_32s_33_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 33 ))
mac_muladd_16s_16s_32s_33_4_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_420_p0),
    .din1(grp_fu_420_p1),
    .din2(grp_fu_405_p2),
    .ce(1'b1),
    .dout(grp_fu_420_p3)
);

equalizer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_38_fu_92 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter6 == 1'b1)) begin
            empty_38_fu_92 <= add_ln870_3_fu_369_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_fu_88 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter6 == 1'b1)) begin
            empty_fu_88 <= add_ln870_4_fu_375_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1057_fu_230_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_V_fu_96 <= add_ln870_fu_236_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_V_fu_96 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln1057_reg_511 <= icmp_ln1057_fu_230_p2;
        icmp_ln1057_reg_511_pp0_iter1_reg <= icmp_ln1057_reg_511;
        input_i_V_reg_532 <= sample_in_M_real_0_0_0_q0;
        trunc_ln1049_reg_515_pp0_iter1_reg <= trunc_ln1049_reg_515;
        zext_ln573_reg_522_pp0_iter1_reg[5 : 0] <= zext_ln573_reg_522[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        icmp_ln1057_reg_511_pp0_iter2_reg <= icmp_ln1057_reg_511_pp0_iter1_reg;
        icmp_ln1057_reg_511_pp0_iter3_reg <= icmp_ln1057_reg_511_pp0_iter2_reg;
        icmp_ln1057_reg_511_pp0_iter4_reg <= icmp_ln1057_reg_511_pp0_iter3_reg;
        sext_ln225_6_reg_554 <= sext_ln225_6_fu_313_p1;
        sext_ln225_8_reg_560 <= sext_ln225_8_fu_317_p1;
        tmp_s_reg_538 <= tmp_s_fu_270_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_fu_230_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln1049_reg_515 <= trunc_ln1049_fu_242_p1;
        zext_ln573_reg_522[5 : 0] <= zext_ln573_fu_260_p1[5 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln1057_fu_230_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_V_7 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_V_7 = i_V_fu_96;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1057_reg_511_pp0_iter4_reg == 1'd1))) begin
        p_out1_ap_vld = 1'b1;
    end else begin
        p_out1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1057_reg_511_pp0_iter4_reg == 1'd1))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        sample_in_M_imag_0_0_0_ce0 = 1'b1;
    end else begin
        sample_in_M_imag_0_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sample_in_M_real_0_0_0_ce0 = 1'b1;
    end else begin
        sample_in_M_real_0_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln870_3_fu_369_p2 = ($signed(sext_ln1676_fu_356_p1) + $signed(empty_38_fu_92));

assign add_ln870_4_fu_375_p2 = (out_q_V_fu_360_p4 + empty_fu_88);

assign add_ln870_fu_236_p2 = (ap_sig_allocacmp_i_V_7 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_399_p1 = sext_ln225_fu_309_p1;

assign grp_fu_405_p1 = sext_ln225_fu_309_p1;

assign grp_fu_412_p0 = sext_ln225_8_reg_560;

assign grp_fu_412_p1 = sext_ln225_7_fu_334_p1;

assign grp_fu_420_p0 = sext_ln225_6_reg_554;

assign grp_fu_420_p1 = sext_ln225_7_fu_334_p1;

assign icmp_ln1057_fu_230_p2 = ((ap_sig_allocacmp_i_V_7 == 3'd4) ? 1'b1 : 1'b0);

assign input_i_V_4_fu_279_p2 = (16'd0 - input_i_V_reg_532);

assign input_i_V_6_fu_284_p3 = ((tmp_s_fu_270_p6[0:0] == 1'b1) ? input_i_V_4_fu_279_p2 : input_i_V_reg_532);

assign input_q_V_6_fu_327_p3 = ((tmp_s_reg_538[0:0] == 1'b1) ? sample_in_M_imag_0_0_0_q0 : input_q_V_fu_321_p2);

assign input_q_V_fu_321_p2 = (16'd0 - sample_in_M_imag_0_0_0_q0);

assign out_i_V_fu_347_p4 = {{grp_fu_412_p3[31:1]}};

assign out_q_V_fu_360_p4 = {{grp_fu_420_p3[32:1]}};

assign p_out = empty_38_fu_92;

assign p_out1 = empty_fu_88;

assign sample_in_M_imag_0_0_0_address0 = zext_ln573_reg_522_pp0_iter1_reg;

assign sample_in_M_real_0_0_0_address0 = zext_ln573_fu_260_p1;

assign sext_ln1676_fu_356_p1 = $signed(out_i_V_fu_347_p4);

assign sext_ln225_6_fu_313_p1 = rhs_fu_291_p6;

assign sext_ln225_7_fu_334_p1 = $signed(input_q_V_6_fu_327_p3);

assign sext_ln225_8_fu_317_p1 = rhs_9_fu_300_p6;

assign sext_ln225_fu_309_p1 = $signed(input_i_V_6_fu_284_p3);

assign tmp_2_fu_246_p5 = ap_sig_allocacmp_i_V_7[1:0];

assign trunc_ln1049_fu_242_p1 = ap_sig_allocacmp_i_V_7[1:0];

assign zext_ln573_fu_260_p1 = tmp_2_fu_246_p6;

always @ (posedge ap_clk) begin
    zext_ln573_reg_522[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln573_reg_522_pp0_iter1_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //equalizer_cpe_estimate_Pipeline_cpe_est
