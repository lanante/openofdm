// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ch_gain_cal_moving_avg_Pipeline_outer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        window_q_V_4_0_reload,
        window_q_V_3_0_reload,
        window_q_V_2_0_reload,
        window_q_V_1_0_reload,
        window_q_V_0_0_reload,
        window_i_V_4_0_reload,
        window_i_V_3_0_reload,
        window_i_V_2_0_reload,
        window_i_V_1_0_reload,
        window_i_V_0_0_reload,
        add_ln18,
        add_i_i177_cast_cast,
        arr,
        empty,
        iq_samples_in_M_imag_address0,
        iq_samples_in_M_imag_ce0,
        iq_samples_in_M_imag_q0,
        iq_samples_in_M_real_address0,
        iq_samples_in_M_real_ce0,
        iq_samples_in_M_real_q0,
        iq_samples_out_M_real_0_0_0_address0,
        iq_samples_out_M_real_0_0_0_ce0,
        iq_samples_out_M_real_0_0_0_we0,
        iq_samples_out_M_real_0_0_0_d0,
        iq_samples_out_M_imag_0_0_0_address0,
        iq_samples_out_M_imag_0_0_0_ce0,
        iq_samples_out_M_imag_0_0_0_we0,
        iq_samples_out_M_imag_0_0_0_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] window_q_V_4_0_reload;
input  [15:0] window_q_V_3_0_reload;
input  [15:0] window_q_V_2_0_reload;
input  [15:0] window_q_V_1_0_reload;
input  [15:0] window_q_V_0_0_reload;
input  [15:0] window_i_V_4_0_reload;
input  [15:0] window_i_V_3_0_reload;
input  [15:0] window_i_V_2_0_reload;
input  [15:0] window_i_V_1_0_reload;
input  [15:0] window_i_V_0_0_reload;
input  [5:0] add_ln18;
input  [2:0] add_i_i177_cast_cast;
input  [9:0] arr;
input  [9:0] empty;
output  [5:0] iq_samples_in_M_imag_address0;
output   iq_samples_in_M_imag_ce0;
input  [15:0] iq_samples_in_M_imag_q0;
output  [5:0] iq_samples_in_M_real_address0;
output   iq_samples_in_M_real_ce0;
input  [15:0] iq_samples_in_M_real_q0;
output  [5:0] iq_samples_out_M_real_0_0_0_address0;
output   iq_samples_out_M_real_0_0_0_ce0;
output   iq_samples_out_M_real_0_0_0_we0;
output  [15:0] iq_samples_out_M_real_0_0_0_d0;
output  [5:0] iq_samples_out_M_imag_0_0_0_address0;
output   iq_samples_out_M_imag_0_0_0_ce0;
output   iq_samples_out_M_imag_0_0_0_we0;
output  [15:0] iq_samples_out_M_imag_0_0_0_d0;

reg ap_idle;
reg iq_samples_in_M_imag_ce0;
reg iq_samples_in_M_real_ce0;
reg iq_samples_out_M_real_0_0_0_ce0;
reg iq_samples_out_M_real_0_0_0_we0;
reg iq_samples_out_M_imag_0_0_0_ce0;
reg iq_samples_out_M_imag_0_0_0_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln18_fu_401_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [9:0] ACTIVE_SC_IDX_52_address0;
reg    ACTIVE_SC_IDX_52_ce0;
wire   [5:0] ACTIVE_SC_IDX_52_q0;
wire   [9:0] ACTIVE_SC_IDX_52_address1;
reg    ACTIVE_SC_IDX_52_ce1;
wire   [5:0] ACTIVE_SC_IDX_52_q1;
wire    ap_block_pp0_stage0_11001;
wire   [5:0] add_i_i177_cast_cast_cast_cast_fu_329_p1;
reg   [5:0] add_i_i177_cast_cast_cast_cast_reg_931;
reg   [5:0] i_V_1_reg_936;
reg   [0:0] icmp_ln18_reg_943;
reg   [0:0] icmp_ln18_reg_943_pp0_iter1_reg;
reg   [0:0] icmp_ln18_reg_943_pp0_iter2_reg;
reg   [0:0] icmp_ln18_reg_943_pp0_iter3_reg;
wire   [5:0] add_ln573_2_fu_413_p2;
reg   [5:0] add_ln573_2_reg_947;
wire   [0:0] icmp_ln1061_fu_429_p2;
reg   [0:0] icmp_ln1061_reg_952;
reg   [0:0] icmp_ln1061_reg_952_pp0_iter1_reg;
reg   [0:0] icmp_ln1061_reg_952_pp0_iter2_reg;
reg   [0:0] icmp_ln1061_reg_952_pp0_iter3_reg;
reg   [0:0] icmp_ln1061_reg_952_pp0_iter4_reg;
reg   [0:0] icmp_ln1061_reg_952_pp0_iter5_reg;
reg   [0:0] icmp_ln1061_reg_952_pp0_iter6_reg;
reg   [0:0] icmp_ln1061_reg_952_pp0_iter7_reg;
reg   [5:0] ACTIVE_SC_IDX_52_load_1_reg_976;
reg   [5:0] ACTIVE_SC_IDX_52_load_1_reg_976_pp0_iter3_reg;
reg   [5:0] ACTIVE_SC_IDX_52_load_1_reg_976_pp0_iter4_reg;
reg   [5:0] ACTIVE_SC_IDX_52_load_1_reg_976_pp0_iter5_reg;
reg   [5:0] ACTIVE_SC_IDX_52_load_1_reg_976_pp0_iter6_reg;
reg   [5:0] ACTIVE_SC_IDX_52_load_1_reg_976_pp0_iter7_reg;
reg  signed [15:0] new_input_q_V_reg_981;
reg  signed [15:0] new_input_i_V_reg_988;
reg   [0:0] tmp_7_reg_1000;
reg   [0:0] tmp_7_reg_1000_pp0_iter5_reg;
reg   [0:0] tmp_7_reg_1000_pp0_iter6_reg;
reg   [0:0] tmp_7_reg_1000_pp0_iter7_reg;
reg   [0:0] tmp_10_reg_1011;
reg   [0:0] tmp_10_reg_1011_pp0_iter5_reg;
reg   [0:0] tmp_10_reg_1011_pp0_iter6_reg;
reg   [0:0] tmp_10_reg_1011_pp0_iter7_reg;
wire  signed [15:0] sext_ln1543_2_fu_729_p1;
reg  signed [15:0] sext_ln1543_2_reg_1017;
wire   [15:0] sub_ln1543_1_fu_740_p2;
reg   [15:0] sub_ln1543_1_reg_1022;
wire  signed [15:0] sext_ln1543_5_fu_778_p1;
reg  signed [15:0] sext_ln1543_5_reg_1027;
wire   [15:0] sub_ln1543_3_fu_789_p2;
reg   [15:0] sub_ln1543_3_reg_1032;
reg    ap_condition_exit_pp0_iter4_stage0;
wire   [63:0] zext_ln1057_fu_493_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln573_1_fu_512_p1;
wire   [63:0] zext_ln1057_1_fu_517_p1;
wire   [63:0] zext_ln573_2_fu_807_p1;
reg   [5:0] op2_fu_112;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_i_V_1;
wire   [5:0] i_V_fu_407_p2;
reg   [17:0] sum_fd_ch_init_q_V_fu_116;
wire   [17:0] sum_fd_ch_init_q_V_1_fu_599_p2;
reg   [17:0] sum_fd_ch_init_i_V_fu_120;
wire   [17:0] sum_fd_ch_init_i_V_1_fu_576_p2;
reg   [15:0] prev_i_V_fu_124;
reg   [15:0] prev_q_V_fu_128;
reg   [15:0] window_i_V_1_2_fu_132;
reg   [15:0] window_i_V_2_2_fu_136;
reg   [15:0] window_i_V_3_2_fu_140;
reg   [15:0] new_input_i_V_1_fu_144;
reg   [15:0] window_q_V_1_2_fu_148;
reg   [15:0] window_q_V_2_2_fu_152;
reg   [15:0] window_q_V_3_2_fu_156;
reg   [15:0] new_input_q_V_1_fu_160;
wire  signed [4:0] add_i_i177_cast_cast_cast_fu_325_p1;
wire   [3:0] tmp_6_fu_419_p4;
wire   [4:0] tmp_5_fu_440_p4;
wire  signed [9:0] sext_ln573_fu_459_p1;
wire   [0:0] icmp_ln1057_fu_449_p2;
wire   [0:0] icmp_ln1057_1_fu_455_p2;
wire   [0:0] xor_ln1057_fu_473_p2;
wire   [0:0] and_ln1057_fu_479_p2;
wire   [9:0] add_ln573_fu_462_p2;
wire   [9:0] select_ln1057_fu_467_p3;
wire   [9:0] select_ln1057_1_fu_485_p3;
wire   [5:0] add_ln573_3_fu_498_p2;
wire   [9:0] zext_ln573_fu_503_p1;
wire   [9:0] add_ln573_1_fu_507_p2;
wire  signed [15:0] sext_ln70_fu_559_p0;
wire  signed [17:0] sext_ln70_fu_559_p1;
wire   [17:0] sub_ln70_fu_563_p2;
wire  signed [17:0] sext_ln70_1_fu_569_p1;
wire  signed [15:0] sext_ln70_2_fu_582_p0;
wire  signed [17:0] sext_ln70_2_fu_582_p1;
wire   [17:0] sub_ln70_1_fu_586_p2;
wire  signed [17:0] sext_ln70_3_fu_592_p1;
wire   [15:0] trunc_ln70_fu_572_p1;
wire  signed [15:0] add_ln70_2_fu_605_p2;
wire   [15:0] trunc_ln70_1_fu_595_p1;
wire  signed [15:0] add_ln70_3_fu_622_p2;
wire  signed [33:0] grp_fu_812_p2;
wire   [32:0] trunc_ln1543_fu_697_p1;
wire   [32:0] sub_ln1543_fu_700_p2;
wire   [13:0] tmp_8_fu_706_p4;
wire   [14:0] tmp_9_fu_720_p4;
wire  signed [15:0] sext_ln1543_1_fu_716_p1;
wire   [15:0] select_ln1543_fu_733_p3;
wire  signed [33:0] grp_fu_820_p2;
wire   [32:0] trunc_ln1543_1_fu_746_p1;
wire   [32:0] sub_ln1543_2_fu_749_p2;
wire   [13:0] tmp_11_fu_755_p4;
wire   [14:0] tmp_12_fu_769_p4;
wire  signed [15:0] sext_ln1543_4_fu_765_p1;
wire   [15:0] select_ln1543_2_fu_782_p3;
wire   [16:0] grp_fu_812_p1;
wire   [16:0] grp_fu_820_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_done_reg = 1'b0;
end

ch_gain_cal_moving_avg_Pipeline_outer_ACTIVE_SC_IDX_52 #(
    .DataWidth( 6 ),
    .AddressRange( 564 ),
    .AddressWidth( 10 ))
ACTIVE_SC_IDX_52_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ACTIVE_SC_IDX_52_address0),
    .ce0(ACTIVE_SC_IDX_52_ce0),
    .q0(ACTIVE_SC_IDX_52_q0),
    .address1(ACTIVE_SC_IDX_52_address1),
    .ce1(ACTIVE_SC_IDX_52_ce1),
    .q1(ACTIVE_SC_IDX_52_q1)
);

ch_gain_cal_mul_mul_16s_17ns_34_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 34 ))
mul_mul_16s_17ns_34_4_1_U39(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln70_2_fu_605_p2),
    .din1(grp_fu_812_p1),
    .ce(1'b1),
    .dout(grp_fu_812_p2)
);

ch_gain_cal_mul_mul_16s_17ns_34_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 34 ))
mul_mul_16s_17ns_34_4_1_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln70_3_fu_622_p2),
    .din1(grp_fu_820_p1),
    .ce(1'b1),
    .dout(grp_fu_820_p2)
);

ch_gain_cal_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter4_stage0)) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            new_input_i_V_1_fu_144 <= window_i_V_4_0_reload;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln18_reg_943_pp0_iter3_reg == 1'd0))) begin
            new_input_i_V_1_fu_144 <= new_input_i_V_reg_988;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            new_input_q_V_1_fu_160 <= window_q_V_4_0_reload;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln18_reg_943_pp0_iter3_reg == 1'd0))) begin
            new_input_q_V_1_fu_160 <= new_input_q_V_reg_981;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln18_fu_401_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            op2_fu_112 <= i_V_fu_407_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            op2_fu_112 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            prev_i_V_fu_124 <= window_i_V_0_0_reload;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln18_reg_943_pp0_iter3_reg == 1'd0))) begin
            prev_i_V_fu_124 <= window_i_V_1_2_fu_132;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            prev_q_V_fu_128 <= window_q_V_0_0_reload;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln18_reg_943_pp0_iter3_reg == 1'd0))) begin
            prev_q_V_fu_128 <= window_q_V_1_2_fu_148;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            sum_fd_ch_init_i_V_fu_120 <= 18'd0;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln18_reg_943_pp0_iter3_reg == 1'd0))) begin
            sum_fd_ch_init_i_V_fu_120 <= sum_fd_ch_init_i_V_1_fu_576_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            sum_fd_ch_init_q_V_fu_116 <= 18'd0;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln18_reg_943_pp0_iter3_reg == 1'd0))) begin
            sum_fd_ch_init_q_V_fu_116 <= sum_fd_ch_init_q_V_1_fu_599_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            window_i_V_1_2_fu_132 <= window_i_V_1_0_reload;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln18_reg_943_pp0_iter3_reg == 1'd0))) begin
            window_i_V_1_2_fu_132 <= window_i_V_2_2_fu_136;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            window_i_V_2_2_fu_136 <= window_i_V_2_0_reload;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln18_reg_943_pp0_iter3_reg == 1'd0))) begin
            window_i_V_2_2_fu_136 <= window_i_V_3_2_fu_140;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            window_i_V_3_2_fu_140 <= window_i_V_3_0_reload;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln18_reg_943_pp0_iter3_reg == 1'd0))) begin
            window_i_V_3_2_fu_140 <= new_input_i_V_1_fu_144;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            window_q_V_1_2_fu_148 <= window_q_V_1_0_reload;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln18_reg_943_pp0_iter3_reg == 1'd0))) begin
            window_q_V_1_2_fu_148 <= window_q_V_2_2_fu_152;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            window_q_V_2_2_fu_152 <= window_q_V_2_0_reload;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln18_reg_943_pp0_iter3_reg == 1'd0))) begin
            window_q_V_2_2_fu_152 <= window_q_V_3_2_fu_156;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            window_q_V_3_2_fu_156 <= window_q_V_3_0_reload;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln18_reg_943_pp0_iter3_reg == 1'd0))) begin
            window_q_V_3_2_fu_156 <= new_input_q_V_1_fu_160;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1061_reg_952_pp0_iter1_reg == 1'd0) & (icmp_ln18_reg_943_pp0_iter1_reg == 1'd0))) begin
        ACTIVE_SC_IDX_52_load_1_reg_976 <= ACTIVE_SC_IDX_52_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ACTIVE_SC_IDX_52_load_1_reg_976_pp0_iter3_reg <= ACTIVE_SC_IDX_52_load_1_reg_976;
        ACTIVE_SC_IDX_52_load_1_reg_976_pp0_iter4_reg <= ACTIVE_SC_IDX_52_load_1_reg_976_pp0_iter3_reg;
        ACTIVE_SC_IDX_52_load_1_reg_976_pp0_iter5_reg <= ACTIVE_SC_IDX_52_load_1_reg_976_pp0_iter4_reg;
        ACTIVE_SC_IDX_52_load_1_reg_976_pp0_iter6_reg <= ACTIVE_SC_IDX_52_load_1_reg_976_pp0_iter5_reg;
        ACTIVE_SC_IDX_52_load_1_reg_976_pp0_iter7_reg <= ACTIVE_SC_IDX_52_load_1_reg_976_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        icmp_ln1061_reg_952_pp0_iter2_reg <= icmp_ln1061_reg_952_pp0_iter1_reg;
        icmp_ln1061_reg_952_pp0_iter3_reg <= icmp_ln1061_reg_952_pp0_iter2_reg;
        icmp_ln1061_reg_952_pp0_iter4_reg <= icmp_ln1061_reg_952_pp0_iter3_reg;
        icmp_ln1061_reg_952_pp0_iter5_reg <= icmp_ln1061_reg_952_pp0_iter4_reg;
        icmp_ln1061_reg_952_pp0_iter6_reg <= icmp_ln1061_reg_952_pp0_iter5_reg;
        icmp_ln1061_reg_952_pp0_iter7_reg <= icmp_ln1061_reg_952_pp0_iter6_reg;
        icmp_ln18_reg_943_pp0_iter2_reg <= icmp_ln18_reg_943_pp0_iter1_reg;
        icmp_ln18_reg_943_pp0_iter3_reg <= icmp_ln18_reg_943_pp0_iter2_reg;
        tmp_10_reg_1011_pp0_iter5_reg <= tmp_10_reg_1011;
        tmp_10_reg_1011_pp0_iter6_reg <= tmp_10_reg_1011_pp0_iter5_reg;
        tmp_10_reg_1011_pp0_iter7_reg <= tmp_10_reg_1011_pp0_iter6_reg;
        tmp_7_reg_1000_pp0_iter5_reg <= tmp_7_reg_1000;
        tmp_7_reg_1000_pp0_iter6_reg <= tmp_7_reg_1000_pp0_iter5_reg;
        tmp_7_reg_1000_pp0_iter7_reg <= tmp_7_reg_1000_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_i_i177_cast_cast_cast_cast_reg_931[4 : 0] <= add_i_i177_cast_cast_cast_cast_fu_329_p1[4 : 0];
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        i_V_1_reg_936 <= ap_sig_allocacmp_i_V_1;
        icmp_ln1061_reg_952_pp0_iter1_reg <= icmp_ln1061_reg_952;
        icmp_ln18_reg_943 <= icmp_ln18_fu_401_p2;
        icmp_ln18_reg_943_pp0_iter1_reg <= icmp_ln18_reg_943;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_401_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln573_2_reg_947 <= add_ln573_2_fu_413_p2;
        icmp_ln1061_reg_952 <= icmp_ln1061_fu_429_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln18_reg_943_pp0_iter2_reg == 1'd0))) begin
        new_input_i_V_reg_988 <= iq_samples_in_M_real_q0;
        new_input_q_V_reg_981 <= iq_samples_in_M_imag_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1061_reg_952_pp0_iter6_reg == 1'd0))) begin
        sext_ln1543_2_reg_1017 <= sext_ln1543_2_fu_729_p1;
        sext_ln1543_5_reg_1027 <= sext_ln1543_5_fu_778_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_7_reg_1000_pp0_iter6_reg == 1'd1) & (icmp_ln1061_reg_952_pp0_iter6_reg == 1'd0))) begin
        sub_ln1543_1_reg_1022 <= sub_ln1543_1_fu_740_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_10_reg_1011_pp0_iter6_reg == 1'd1) & (icmp_ln1061_reg_952_pp0_iter6_reg == 1'd0))) begin
        sub_ln1543_3_reg_1032 <= sub_ln1543_3_fu_789_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1061_reg_952_pp0_iter3_reg == 1'd0) & (icmp_ln18_reg_943_pp0_iter3_reg == 1'd0))) begin
        tmp_10_reg_1011 <= add_ln70_3_fu_622_p2[32'd15];
        tmp_7_reg_1000 <= add_ln70_2_fu_605_p2[32'd15];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ACTIVE_SC_IDX_52_ce0 = 1'b1;
    end else begin
        ACTIVE_SC_IDX_52_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ACTIVE_SC_IDX_52_ce1 = 1'b1;
    end else begin
        ACTIVE_SC_IDX_52_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln18_fu_401_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln18_reg_943_pp0_iter3_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter4_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter4_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_V_1 = 6'd0;
    end else begin
        ap_sig_allocacmp_i_V_1 = op2_fu_112;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        iq_samples_in_M_imag_ce0 = 1'b1;
    end else begin
        iq_samples_in_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        iq_samples_in_M_real_ce0 = 1'b1;
    end else begin
        iq_samples_in_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        iq_samples_out_M_imag_0_0_0_ce0 = 1'b1;
    end else begin
        iq_samples_out_M_imag_0_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln1061_reg_952_pp0_iter7_reg == 1'd0))) begin
        iq_samples_out_M_imag_0_0_0_we0 = 1'b1;
    end else begin
        iq_samples_out_M_imag_0_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        iq_samples_out_M_real_0_0_0_ce0 = 1'b1;
    end else begin
        iq_samples_out_M_real_0_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln1061_reg_952_pp0_iter7_reg == 1'd0))) begin
        iq_samples_out_M_real_0_0_0_we0 = 1'b1;
    end else begin
        iq_samples_out_M_real_0_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ACTIVE_SC_IDX_52_address0 = zext_ln573_1_fu_512_p1;

assign ACTIVE_SC_IDX_52_address1 = zext_ln1057_fu_493_p1;

assign add_i_i177_cast_cast_cast_cast_fu_329_p1 = $unsigned(add_i_i177_cast_cast_cast_fu_325_p1);

assign add_i_i177_cast_cast_cast_fu_325_p1 = $signed(add_i_i177_cast_cast);

assign add_ln573_1_fu_507_p2 = (zext_ln573_fu_503_p1 + arr);

assign add_ln573_2_fu_413_p2 = ($signed(ap_sig_allocacmp_i_V_1) + $signed(6'd62));

assign add_ln573_3_fu_498_p2 = ($signed(i_V_1_reg_936) + $signed(6'd60));

assign add_ln573_fu_462_p2 = ($signed(sext_ln573_fu_459_p1) + $signed(arr));

assign add_ln70_2_fu_605_p2 = ($signed(trunc_ln70_fu_572_p1) + $signed(new_input_i_V_reg_988));

assign add_ln70_3_fu_622_p2 = ($signed(trunc_ln70_1_fu_595_p1) + $signed(new_input_q_V_reg_981));

assign and_ln1057_fu_479_p2 = (xor_ln1057_fu_473_p2 & icmp_ln1057_1_fu_455_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_812_p1 = 34'd104858;

assign grp_fu_820_p1 = 34'd104858;

assign i_V_fu_407_p2 = (ap_sig_allocacmp_i_V_1 + 6'd1);

assign icmp_ln1057_1_fu_455_p2 = ((i_V_1_reg_936 < add_i_i177_cast_cast_cast_cast_reg_931) ? 1'b1 : 1'b0);

assign icmp_ln1057_fu_449_p2 = ((tmp_5_fu_440_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln1061_fu_429_p2 = ((tmp_6_fu_419_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_401_p2 = ((ap_sig_allocacmp_i_V_1 == add_ln18) ? 1'b1 : 1'b0);

assign iq_samples_in_M_imag_address0 = zext_ln1057_1_fu_517_p1;

assign iq_samples_in_M_real_address0 = zext_ln1057_1_fu_517_p1;

assign iq_samples_out_M_imag_0_0_0_address0 = zext_ln573_2_fu_807_p1;

assign iq_samples_out_M_imag_0_0_0_d0 = ((tmp_10_reg_1011_pp0_iter7_reg[0:0] == 1'b1) ? sub_ln1543_3_reg_1032 : sext_ln1543_5_reg_1027);

assign iq_samples_out_M_real_0_0_0_address0 = zext_ln573_2_fu_807_p1;

assign iq_samples_out_M_real_0_0_0_d0 = ((tmp_7_reg_1000_pp0_iter7_reg[0:0] == 1'b1) ? sub_ln1543_1_reg_1022 : sext_ln1543_2_reg_1017);

assign select_ln1057_1_fu_485_p3 = ((and_ln1057_fu_479_p2[0:0] == 1'b1) ? add_ln573_fu_462_p2 : select_ln1057_fu_467_p3);

assign select_ln1057_fu_467_p3 = ((icmp_ln1057_fu_449_p2[0:0] == 1'b1) ? arr : empty);

assign select_ln1543_2_fu_782_p3 = ((tmp_10_reg_1011_pp0_iter6_reg[0:0] == 1'b1) ? sext_ln1543_4_fu_765_p1 : sext_ln1543_5_fu_778_p1);

assign select_ln1543_fu_733_p3 = ((tmp_7_reg_1000_pp0_iter6_reg[0:0] == 1'b1) ? sext_ln1543_1_fu_716_p1 : sext_ln1543_2_fu_729_p1);

assign sext_ln1543_1_fu_716_p1 = $signed(tmp_8_fu_706_p4);

assign sext_ln1543_2_fu_729_p1 = $signed(tmp_9_fu_720_p4);

assign sext_ln1543_4_fu_765_p1 = $signed(tmp_11_fu_755_p4);

assign sext_ln1543_5_fu_778_p1 = $signed(tmp_12_fu_769_p4);

assign sext_ln573_fu_459_p1 = $signed(add_ln573_2_reg_947);

assign sext_ln70_1_fu_569_p1 = new_input_i_V_reg_988;

assign sext_ln70_2_fu_582_p0 = prev_q_V_fu_128;

assign sext_ln70_2_fu_582_p1 = sext_ln70_2_fu_582_p0;

assign sext_ln70_3_fu_592_p1 = new_input_q_V_reg_981;

assign sext_ln70_fu_559_p0 = prev_i_V_fu_124;

assign sext_ln70_fu_559_p1 = sext_ln70_fu_559_p0;

assign sub_ln1543_1_fu_740_p2 = (16'd0 - select_ln1543_fu_733_p3);

assign sub_ln1543_2_fu_749_p2 = (33'd0 - trunc_ln1543_1_fu_746_p1);

assign sub_ln1543_3_fu_789_p2 = (16'd0 - select_ln1543_2_fu_782_p3);

assign sub_ln1543_fu_700_p2 = (33'd0 - trunc_ln1543_fu_697_p1);

assign sub_ln70_1_fu_586_p2 = ($signed(sum_fd_ch_init_q_V_fu_116) - $signed(sext_ln70_2_fu_582_p1));

assign sub_ln70_fu_563_p2 = ($signed(sum_fd_ch_init_i_V_fu_120) - $signed(sext_ln70_fu_559_p1));

assign sum_fd_ch_init_i_V_1_fu_576_p2 = ($signed(sub_ln70_fu_563_p2) + $signed(sext_ln70_1_fu_569_p1));

assign sum_fd_ch_init_q_V_1_fu_599_p2 = ($signed(sub_ln70_1_fu_586_p2) + $signed(sext_ln70_3_fu_592_p1));

assign tmp_11_fu_755_p4 = {{sub_ln1543_2_fu_749_p2[32:19]}};

assign tmp_12_fu_769_p4 = {{grp_fu_820_p2[33:19]}};

assign tmp_5_fu_440_p4 = {{i_V_1_reg_936[5:1]}};

assign tmp_6_fu_419_p4 = {{ap_sig_allocacmp_i_V_1[5:2]}};

assign tmp_8_fu_706_p4 = {{sub_ln1543_fu_700_p2[32:19]}};

assign tmp_9_fu_720_p4 = {{grp_fu_812_p2[33:19]}};

assign trunc_ln1543_1_fu_746_p1 = grp_fu_820_p2[32:0];

assign trunc_ln1543_fu_697_p1 = grp_fu_812_p2[32:0];

assign trunc_ln70_1_fu_595_p1 = sub_ln70_1_fu_586_p2[15:0];

assign trunc_ln70_fu_572_p1 = sub_ln70_fu_563_p2[15:0];

assign xor_ln1057_fu_473_p2 = (icmp_ln1057_fu_449_p2 ^ 1'd1);

assign zext_ln1057_1_fu_517_p1 = ACTIVE_SC_IDX_52_q1;

assign zext_ln1057_fu_493_p1 = select_ln1057_1_fu_485_p3;

assign zext_ln573_1_fu_512_p1 = add_ln573_1_fu_507_p2;

assign zext_ln573_2_fu_807_p1 = ACTIVE_SC_IDX_52_load_1_reg_976_pp0_iter7_reg;

assign zext_ln573_fu_503_p1 = add_ln573_3_fu_498_p2;

always @ (posedge ap_clk) begin
    add_i_i177_cast_cast_cast_cast_reg_931[5] <= 1'b0;
end

endmodule //ch_gain_cal_moving_avg_Pipeline_outer
