// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ch_gain_cal_moving_avg_Pipeline_clear (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        window_q_V_4_0_out,
        window_q_V_4_0_out_ap_vld,
        window_q_V_3_0_out,
        window_q_V_3_0_out_ap_vld,
        window_q_V_2_0_out,
        window_q_V_2_0_out_ap_vld,
        window_q_V_1_0_out,
        window_q_V_1_0_out_ap_vld,
        window_q_V_0_0_out,
        window_q_V_0_0_out_ap_vld,
        window_i_V_4_0_out,
        window_i_V_4_0_out_ap_vld,
        window_i_V_3_0_out,
        window_i_V_3_0_out_ap_vld,
        window_i_V_2_0_out,
        window_i_V_2_0_out_ap_vld,
        window_i_V_1_0_out,
        window_i_V_1_0_out_ap_vld,
        window_i_V_0_0_out,
        window_i_V_0_0_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] window_q_V_4_0_out;
output   window_q_V_4_0_out_ap_vld;
output  [15:0] window_q_V_3_0_out;
output   window_q_V_3_0_out_ap_vld;
output  [15:0] window_q_V_2_0_out;
output   window_q_V_2_0_out_ap_vld;
output  [15:0] window_q_V_1_0_out;
output   window_q_V_1_0_out_ap_vld;
output  [15:0] window_q_V_0_0_out;
output   window_q_V_0_0_out_ap_vld;
output  [15:0] window_i_V_4_0_out;
output   window_i_V_4_0_out_ap_vld;
output  [15:0] window_i_V_3_0_out;
output   window_i_V_3_0_out_ap_vld;
output  [15:0] window_i_V_2_0_out;
output   window_i_V_2_0_out_ap_vld;
output  [15:0] window_i_V_1_0_out;
output   window_i_V_1_0_out_ap_vld;
output  [15:0] window_i_V_0_0_out;
output   window_i_V_0_0_out_ap_vld;

reg ap_idle;
reg window_q_V_4_0_out_ap_vld;
reg window_q_V_3_0_out_ap_vld;
reg window_q_V_2_0_out_ap_vld;
reg window_q_V_1_0_out_ap_vld;
reg window_q_V_0_0_out_ap_vld;
reg window_i_V_4_0_out_ap_vld;
reg window_i_V_3_0_out_ap_vld;
reg window_i_V_2_0_out_ap_vld;
reg window_i_V_1_0_out_ap_vld;
reg window_i_V_0_0_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln1057_fu_172_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [2:0] k_V_fu_50;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_k_V_1;
wire   [2:0] add_ln870_fu_178_p2;
reg   [15:0] window_i_V_0_0_fu_54;
wire   [15:0] window_i_V_0_1_fu_214_p10;
reg   [15:0] window_i_V_1_0_fu_58;
wire   [15:0] window_i_V_1_1_fu_236_p10;
reg   [15:0] window_i_V_2_0_fu_62;
wire   [15:0] window_i_V_2_1_fu_258_p10;
reg   [15:0] window_i_V_3_0_fu_66;
wire   [15:0] window_i_V_3_1_fu_280_p10;
reg   [15:0] window_i_V_4_0_fu_70;
wire   [15:0] window_i_V_4_1_fu_302_p10;
reg   [15:0] window_q_V_0_0_fu_74;
wire   [15:0] window_q_V_0_1_fu_324_p10;
reg   [15:0] window_q_V_1_0_fu_78;
wire   [15:0] window_q_V_1_1_fu_346_p10;
reg   [15:0] window_q_V_2_0_fu_82;
wire   [15:0] window_q_V_2_1_fu_368_p10;
reg   [15:0] window_q_V_3_0_fu_86;
wire   [15:0] window_q_V_3_1_fu_390_p10;
reg   [15:0] window_q_V_4_0_fu_90;
wire   [15:0] window_q_V_4_1_fu_412_p10;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

ch_gain_cal_mux_83_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
mux_83_16_1_1_U18(
    .din0(16'd0),
    .din1(window_i_V_0_0_fu_54),
    .din2(window_i_V_0_0_fu_54),
    .din3(window_i_V_0_0_fu_54),
    .din4(window_i_V_0_0_fu_54),
    .din5(window_i_V_0_0_fu_54),
    .din6(window_i_V_0_0_fu_54),
    .din7(window_i_V_0_0_fu_54),
    .din8(ap_sig_allocacmp_k_V_1),
    .dout(window_i_V_0_1_fu_214_p10)
);

ch_gain_cal_mux_83_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
mux_83_16_1_1_U19(
    .din0(window_i_V_1_0_fu_58),
    .din1(16'd0),
    .din2(window_i_V_1_0_fu_58),
    .din3(window_i_V_1_0_fu_58),
    .din4(window_i_V_1_0_fu_58),
    .din5(window_i_V_1_0_fu_58),
    .din6(window_i_V_1_0_fu_58),
    .din7(window_i_V_1_0_fu_58),
    .din8(ap_sig_allocacmp_k_V_1),
    .dout(window_i_V_1_1_fu_236_p10)
);

ch_gain_cal_mux_83_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
mux_83_16_1_1_U20(
    .din0(window_i_V_2_0_fu_62),
    .din1(window_i_V_2_0_fu_62),
    .din2(16'd0),
    .din3(window_i_V_2_0_fu_62),
    .din4(window_i_V_2_0_fu_62),
    .din5(window_i_V_2_0_fu_62),
    .din6(window_i_V_2_0_fu_62),
    .din7(window_i_V_2_0_fu_62),
    .din8(ap_sig_allocacmp_k_V_1),
    .dout(window_i_V_2_1_fu_258_p10)
);

ch_gain_cal_mux_83_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
mux_83_16_1_1_U21(
    .din0(window_i_V_3_0_fu_66),
    .din1(window_i_V_3_0_fu_66),
    .din2(window_i_V_3_0_fu_66),
    .din3(16'd0),
    .din4(window_i_V_3_0_fu_66),
    .din5(window_i_V_3_0_fu_66),
    .din6(window_i_V_3_0_fu_66),
    .din7(window_i_V_3_0_fu_66),
    .din8(ap_sig_allocacmp_k_V_1),
    .dout(window_i_V_3_1_fu_280_p10)
);

ch_gain_cal_mux_83_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
mux_83_16_1_1_U22(
    .din0(window_i_V_4_0_fu_70),
    .din1(window_i_V_4_0_fu_70),
    .din2(window_i_V_4_0_fu_70),
    .din3(window_i_V_4_0_fu_70),
    .din4(16'd0),
    .din5(16'd0),
    .din6(16'd0),
    .din7(16'd0),
    .din8(ap_sig_allocacmp_k_V_1),
    .dout(window_i_V_4_1_fu_302_p10)
);

ch_gain_cal_mux_83_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
mux_83_16_1_1_U23(
    .din0(16'd0),
    .din1(window_q_V_0_0_fu_74),
    .din2(window_q_V_0_0_fu_74),
    .din3(window_q_V_0_0_fu_74),
    .din4(window_q_V_0_0_fu_74),
    .din5(window_q_V_0_0_fu_74),
    .din6(window_q_V_0_0_fu_74),
    .din7(window_q_V_0_0_fu_74),
    .din8(ap_sig_allocacmp_k_V_1),
    .dout(window_q_V_0_1_fu_324_p10)
);

ch_gain_cal_mux_83_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
mux_83_16_1_1_U24(
    .din0(window_q_V_1_0_fu_78),
    .din1(16'd0),
    .din2(window_q_V_1_0_fu_78),
    .din3(window_q_V_1_0_fu_78),
    .din4(window_q_V_1_0_fu_78),
    .din5(window_q_V_1_0_fu_78),
    .din6(window_q_V_1_0_fu_78),
    .din7(window_q_V_1_0_fu_78),
    .din8(ap_sig_allocacmp_k_V_1),
    .dout(window_q_V_1_1_fu_346_p10)
);

ch_gain_cal_mux_83_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
mux_83_16_1_1_U25(
    .din0(window_q_V_2_0_fu_82),
    .din1(window_q_V_2_0_fu_82),
    .din2(16'd0),
    .din3(window_q_V_2_0_fu_82),
    .din4(window_q_V_2_0_fu_82),
    .din5(window_q_V_2_0_fu_82),
    .din6(window_q_V_2_0_fu_82),
    .din7(window_q_V_2_0_fu_82),
    .din8(ap_sig_allocacmp_k_V_1),
    .dout(window_q_V_2_1_fu_368_p10)
);

ch_gain_cal_mux_83_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
mux_83_16_1_1_U26(
    .din0(window_q_V_3_0_fu_86),
    .din1(window_q_V_3_0_fu_86),
    .din2(window_q_V_3_0_fu_86),
    .din3(16'd0),
    .din4(window_q_V_3_0_fu_86),
    .din5(window_q_V_3_0_fu_86),
    .din6(window_q_V_3_0_fu_86),
    .din7(window_q_V_3_0_fu_86),
    .din8(ap_sig_allocacmp_k_V_1),
    .dout(window_q_V_3_1_fu_390_p10)
);

ch_gain_cal_mux_83_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
mux_83_16_1_1_U27(
    .din0(window_q_V_4_0_fu_90),
    .din1(window_q_V_4_0_fu_90),
    .din2(window_q_V_4_0_fu_90),
    .din3(window_q_V_4_0_fu_90),
    .din4(16'd0),
    .din5(16'd0),
    .din6(16'd0),
    .din7(16'd0),
    .din8(ap_sig_allocacmp_k_V_1),
    .dout(window_q_V_4_1_fu_412_p10)
);

ch_gain_cal_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln1057_fu_172_p2 == 1'd0)) begin
            k_V_fu_50 <= add_ln870_fu_178_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_V_fu_50 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_172_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        window_i_V_0_0_fu_54 <= window_i_V_0_1_fu_214_p10;
        window_i_V_1_0_fu_58 <= window_i_V_1_1_fu_236_p10;
        window_i_V_2_0_fu_62 <= window_i_V_2_1_fu_258_p10;
        window_i_V_3_0_fu_66 <= window_i_V_3_1_fu_280_p10;
        window_i_V_4_0_fu_70 <= window_i_V_4_1_fu_302_p10;
        window_q_V_0_0_fu_74 <= window_q_V_0_1_fu_324_p10;
        window_q_V_1_0_fu_78 <= window_q_V_1_1_fu_346_p10;
        window_q_V_2_0_fu_82 <= window_q_V_2_1_fu_368_p10;
        window_q_V_3_0_fu_86 <= window_q_V_3_1_fu_390_p10;
        window_q_V_4_0_fu_90 <= window_q_V_4_1_fu_412_p10;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_k_V_1 = 3'd0;
    end else begin
        ap_sig_allocacmp_k_V_1 = k_V_fu_50;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        window_i_V_0_0_out_ap_vld = 1'b1;
    end else begin
        window_i_V_0_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        window_i_V_1_0_out_ap_vld = 1'b1;
    end else begin
        window_i_V_1_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        window_i_V_2_0_out_ap_vld = 1'b1;
    end else begin
        window_i_V_2_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        window_i_V_3_0_out_ap_vld = 1'b1;
    end else begin
        window_i_V_3_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        window_i_V_4_0_out_ap_vld = 1'b1;
    end else begin
        window_i_V_4_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        window_q_V_0_0_out_ap_vld = 1'b1;
    end else begin
        window_q_V_0_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        window_q_V_1_0_out_ap_vld = 1'b1;
    end else begin
        window_q_V_1_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        window_q_V_2_0_out_ap_vld = 1'b1;
    end else begin
        window_q_V_2_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        window_q_V_3_0_out_ap_vld = 1'b1;
    end else begin
        window_q_V_3_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1057_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        window_q_V_4_0_out_ap_vld = 1'b1;
    end else begin
        window_q_V_4_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln870_fu_178_p2 = (ap_sig_allocacmp_k_V_1 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln1057_fu_172_p2 = ((ap_sig_allocacmp_k_V_1 == 3'd5) ? 1'b1 : 1'b0);

assign window_i_V_0_0_out = window_i_V_0_0_fu_54;

assign window_i_V_1_0_out = window_i_V_1_0_fu_58;

assign window_i_V_2_0_out = window_i_V_2_0_fu_62;

assign window_i_V_3_0_out = window_i_V_3_0_fu_66;

assign window_i_V_4_0_out = window_i_V_4_0_fu_70;

assign window_q_V_0_0_out = window_q_V_0_0_fu_74;

assign window_q_V_1_0_out = window_q_V_1_0_fu_78;

assign window_q_V_2_0_out = window_q_V_2_0_fu_82;

assign window_q_V_3_0_out = window_q_V_3_0_fu_86;

assign window_q_V_4_0_out = window_q_V_4_0_fu_90;

endmodule //ch_gain_cal_moving_avg_Pipeline_clear
