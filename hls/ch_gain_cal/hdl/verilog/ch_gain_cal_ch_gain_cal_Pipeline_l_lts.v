// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ch_gain_cal_ch_gain_cal_Pipeline_l_lts (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        lts_iq_fd_V_dout,
        lts_iq_fd_V_empty_n,
        lts_iq_fd_V_read,
        first_lts_M_real_V_address0,
        first_lts_M_real_V_ce0,
        first_lts_M_real_V_we0,
        first_lts_M_real_V_d0,
        first_lts_M_real_V_address1,
        first_lts_M_real_V_ce1,
        first_lts_M_real_V_q1,
        first_lts_M_imag_V_address0,
        first_lts_M_imag_V_ce0,
        first_lts_M_imag_V_we0,
        first_lts_M_imag_V_d0,
        first_lts_M_imag_V_address1,
        first_lts_M_imag_V_ce1,
        first_lts_M_imag_V_q1,
        avg_lts_M_real_V_address0,
        avg_lts_M_real_V_ce0,
        avg_lts_M_real_V_we0,
        avg_lts_M_real_V_d0,
        avg_lts_M_imag_V_address0,
        avg_lts_M_imag_V_ce0,
        avg_lts_M_imag_V_we0,
        avg_lts_M_imag_V_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] lts_iq_fd_V_dout;
input   lts_iq_fd_V_empty_n;
output   lts_iq_fd_V_read;
output  [5:0] first_lts_M_real_V_address0;
output   first_lts_M_real_V_ce0;
output   first_lts_M_real_V_we0;
output  [15:0] first_lts_M_real_V_d0;
output  [5:0] first_lts_M_real_V_address1;
output   first_lts_M_real_V_ce1;
input  [15:0] first_lts_M_real_V_q1;
output  [5:0] first_lts_M_imag_V_address0;
output   first_lts_M_imag_V_ce0;
output   first_lts_M_imag_V_we0;
output  [15:0] first_lts_M_imag_V_d0;
output  [5:0] first_lts_M_imag_V_address1;
output   first_lts_M_imag_V_ce1;
input  [15:0] first_lts_M_imag_V_q1;
output  [5:0] avg_lts_M_real_V_address0;
output   avg_lts_M_real_V_ce0;
output   avg_lts_M_real_V_we0;
output  [15:0] avg_lts_M_real_V_d0;
output  [5:0] avg_lts_M_imag_V_address0;
output   avg_lts_M_imag_V_ce0;
output   avg_lts_M_imag_V_we0;
output  [15:0] avg_lts_M_imag_V_d0;

reg ap_idle;
reg lts_iq_fd_V_read;
reg first_lts_M_real_V_ce0;
reg first_lts_M_real_V_we0;
reg first_lts_M_real_V_ce1;
reg first_lts_M_imag_V_ce0;
reg first_lts_M_imag_V_we0;
reg first_lts_M_imag_V_ce1;
reg avg_lts_M_real_V_ce0;
reg avg_lts_M_real_V_we0;
reg avg_lts_M_imag_V_ce0;
reg avg_lts_M_imag_V_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln9_fu_173_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [5:0] LTS_REF_V_address0;
reg    LTS_REF_V_ce0;
wire   [1:0] LTS_REF_V_q0;
reg    lts_iq_fd_V_blk_n;
wire    ap_block_pp0_stage0;
reg   [7:0] i_reg_326;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln14_fu_199_p2;
reg   [0:0] icmp_ln14_reg_335;
reg   [0:0] icmp_ln14_reg_335_pp0_iter1_reg;
reg   [0:0] icmp_ln14_reg_335_pp0_iter2_reg;
wire   [63:0] zext_ln541_fu_205_p1;
reg   [63:0] zext_ln541_reg_339;
reg   [63:0] zext_ln541_reg_339_pp0_iter1_reg;
reg   [63:0] zext_ln541_reg_339_pp0_iter2_reg;
wire  signed [15:0] add_ln1525_fu_266_p2;
reg  signed [15:0] add_ln1525_reg_360;
reg   [1:0] LTS_REF_V_load_reg_365;
wire  signed [15:0] add_ln1525_1_fu_300_p2;
reg  signed [15:0] add_ln1525_1_reg_370;
wire   [15:0] mul_ln70_fu_309_p2;
reg   [15:0] mul_ln70_reg_375;
wire   [15:0] mul_ln70_1_fu_314_p2;
reg   [15:0] mul_ln70_1_reg_380;
wire   [63:0] zext_ln9_fu_217_p1;
reg   [7:0] i_1_fu_66;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_i;
wire   [7:0] add_ln9_fu_179_p2;
wire   [1:0] tmp_fu_189_p4;
wire   [5:0] trunc_ln9_fu_185_p1;
wire   [14:0] r_fu_238_p4;
wire   [14:0] r_1_fu_252_p4;
wire  signed [15:0] sext_ln1676_fu_248_p1;
wire  signed [15:0] sext_ln1676_1_fu_262_p1;
wire   [14:0] r_2_fu_272_p4;
wire   [14:0] r_3_fu_286_p4;
wire  signed [15:0] sext_ln1676_2_fu_282_p1;
wire  signed [15:0] sext_ln1676_3_fu_296_p1;
wire  signed [1:0] mul_ln70_fu_309_p1;
wire  signed [15:0] sext_ln70_fu_306_p1;
wire  signed [1:0] mul_ln70_1_fu_314_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

ch_gain_cal_ch_gain_cal_Pipeline_l_lts_LTS_REF_V #(
    .DataWidth( 2 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
LTS_REF_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(LTS_REF_V_address0),
    .ce0(LTS_REF_V_ce0),
    .q0(LTS_REF_V_q0)
);

ch_gain_cal_mul_16s_2s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mul_16s_2s_16_1_1_U1(
    .din0(add_ln1525_reg_360),
    .din1(mul_ln70_fu_309_p1),
    .dout(mul_ln70_fu_309_p2)
);

ch_gain_cal_mul_16s_2s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mul_16s_2s_16_1_1_U2(
    .din0(add_ln1525_1_reg_370),
    .din1(mul_ln70_1_fu_314_p1),
    .dout(mul_ln70_1_fu_314_p2)
);

ch_gain_cal_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln9_fu_173_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_1_fu_66 <= add_ln9_fu_179_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_66 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln14_reg_335 == 1'd0))) begin
        LTS_REF_V_load_reg_365 <= LTS_REF_V_q0;
        add_ln1525_1_reg_370 <= add_ln1525_1_fu_300_p2;
        add_ln1525_reg_360 <= add_ln1525_fu_266_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        i_reg_326 <= ap_sig_allocacmp_i;
        icmp_ln14_reg_335_pp0_iter1_reg <= icmp_ln14_reg_335;
        zext_ln541_reg_339_pp0_iter1_reg[5 : 0] <= zext_ln541_reg_339[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_173_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln14_reg_335 <= icmp_ln14_fu_199_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln14_reg_335_pp0_iter2_reg <= icmp_ln14_reg_335_pp0_iter1_reg;
        zext_ln541_reg_339_pp0_iter2_reg[5 : 0] <= zext_ln541_reg_339_pp0_iter1_reg[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_reg_335_pp0_iter1_reg == 1'd0))) begin
        mul_ln70_1_reg_380 <= mul_ln70_1_fu_314_p2;
        mul_ln70_reg_375 <= mul_ln70_fu_309_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_173_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln14_fu_199_p2 == 1'd0))) begin
        zext_ln541_reg_339[5 : 0] <= zext_ln541_fu_205_p1[5 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        LTS_REF_V_ce0 = 1'b1;
    end else begin
        LTS_REF_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_fu_173_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 8'd0;
    end else begin
        ap_sig_allocacmp_i = i_1_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        avg_lts_M_imag_V_ce0 = 1'b1;
    end else begin
        avg_lts_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln14_reg_335_pp0_iter2_reg == 1'd0))) begin
        avg_lts_M_imag_V_we0 = 1'b1;
    end else begin
        avg_lts_M_imag_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        avg_lts_M_real_V_ce0 = 1'b1;
    end else begin
        avg_lts_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln14_reg_335_pp0_iter2_reg == 1'd0))) begin
        avg_lts_M_real_V_we0 = 1'b1;
    end else begin
        avg_lts_M_real_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        first_lts_M_imag_V_ce0 = 1'b1;
    end else begin
        first_lts_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        first_lts_M_imag_V_ce1 = 1'b1;
    end else begin
        first_lts_M_imag_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln14_reg_335 == 1'd1))) begin
        first_lts_M_imag_V_we0 = 1'b1;
    end else begin
        first_lts_M_imag_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        first_lts_M_real_V_ce0 = 1'b1;
    end else begin
        first_lts_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        first_lts_M_real_V_ce1 = 1'b1;
    end else begin
        first_lts_M_real_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln14_reg_335 == 1'd1))) begin
        first_lts_M_real_V_we0 = 1'b1;
    end else begin
        first_lts_M_real_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lts_iq_fd_V_blk_n = lts_iq_fd_V_empty_n;
    end else begin
        lts_iq_fd_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lts_iq_fd_V_read = 1'b1;
    end else begin
        lts_iq_fd_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LTS_REF_V_address0 = zext_ln541_fu_205_p1;

assign add_ln1525_1_fu_300_p2 = ($signed(sext_ln1676_2_fu_282_p1) + $signed(sext_ln1676_3_fu_296_p1));

assign add_ln1525_fu_266_p2 = ($signed(sext_ln1676_fu_248_p1) + $signed(sext_ln1676_1_fu_262_p1));

assign add_ln9_fu_179_p2 = (ap_sig_allocacmp_i + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((lts_iq_fd_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((lts_iq_fd_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (lts_iq_fd_V_empty_n == 1'b0);
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign avg_lts_M_imag_V_address0 = zext_ln541_reg_339_pp0_iter2_reg;

assign avg_lts_M_imag_V_d0 = mul_ln70_1_reg_380;

assign avg_lts_M_real_V_address0 = zext_ln541_reg_339_pp0_iter2_reg;

assign avg_lts_M_real_V_d0 = mul_ln70_reg_375;

assign first_lts_M_imag_V_address0 = zext_ln9_fu_217_p1;

assign first_lts_M_imag_V_address1 = zext_ln541_fu_205_p1;

assign first_lts_M_imag_V_d0 = {{lts_iq_fd_V_dout[31:16]}};

assign first_lts_M_real_V_address0 = zext_ln9_fu_217_p1;

assign first_lts_M_real_V_address1 = zext_ln541_fu_205_p1;

assign first_lts_M_real_V_d0 = lts_iq_fd_V_dout[15:0];

assign icmp_ln14_fu_199_p2 = ((tmp_fu_189_p4 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_173_p2 = ((ap_sig_allocacmp_i == 8'd128) ? 1'b1 : 1'b0);

assign mul_ln70_1_fu_314_p1 = sext_ln70_fu_306_p1;

assign mul_ln70_fu_309_p1 = sext_ln70_fu_306_p1;

assign r_1_fu_252_p4 = {{lts_iq_fd_V_dout[15:1]}};

assign r_2_fu_272_p4 = {{first_lts_M_imag_V_q1[15:1]}};

assign r_3_fu_286_p4 = {{lts_iq_fd_V_dout[31:17]}};

assign r_fu_238_p4 = {{first_lts_M_real_V_q1[15:1]}};

assign sext_ln1676_1_fu_262_p1 = $signed(r_1_fu_252_p4);

assign sext_ln1676_2_fu_282_p1 = $signed(r_2_fu_272_p4);

assign sext_ln1676_3_fu_296_p1 = $signed(r_3_fu_286_p4);

assign sext_ln1676_fu_248_p1 = $signed(r_fu_238_p4);

assign sext_ln70_fu_306_p1 = $signed(LTS_REF_V_load_reg_365);

assign tmp_fu_189_p4 = {{ap_sig_allocacmp_i[7:6]}};

assign trunc_ln9_fu_185_p1 = ap_sig_allocacmp_i[5:0];

assign zext_ln541_fu_205_p1 = trunc_ln9_fu_185_p1;

assign zext_ln9_fu_217_p1 = i_reg_326;

always @ (posedge ap_clk) begin
    zext_ln541_reg_339[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln541_reg_339_pp0_iter1_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln541_reg_339_pp0_iter2_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //ch_gain_cal_ch_gain_cal_Pipeline_l_lts
